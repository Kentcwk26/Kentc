FUNCTION register(listCode,code)
    DECLARE userType,UID,username,password,userID,l AS STRING
    DECLARE userAdd AS FILE
    userType = "new"
    UID = NONE
    PRINT("NEWLINECreate your account's username: ")
    GET username
    PRINT("Next, create your account's password: ")
    GET password
    CALL gettenantID(UID,userType) RETURNING userID
    PRINT ("UserID is"+userID)
    CALL listIdentifier WITH listCode RETURNING l
    OPENFILE l IN APPEND AS userAdd
        WRITE(username+","+password+","+userID+",NEWLINE") TO userAdd
    CLOSEFILE
    OPENFILE "currentUser.txt" IN WRITE AS current
        WRITE(username+","+password+","+userID+",NEWLINE") TO current
    CLOSEFILE
    listCode = "t"
    CALL tenantOrTransactionEntryForm(userID,listCode,code)
    RETURN username AND password
ENDFUNCTION

FUNCTION login(listCode,code,nameInput,passInput)
    DECLARE chance AS INTEGER
    DECLARE username,password,UID AS STRING
    DECLARE listRecord AS ARRAY
    DECLARE userInfo,current AS FILE
    chance = 3
    WHILE chance > 0
        IF nameInput AND passInput CONTAINS ANY VALUE THEN
            username = nameInput
            password = passInput
        ELSE
            PRINT("Please enter username and password to proceed.NEWLINE")
            PRINT("Username: ")
            GET username
            PRINT("Password: ")
            GET password
        ENDIF
        CALL listIdentifier(listCode) RETURNING l
        OPENFILE l IN READ AS userInfo
            userCheck = READ userInfo LINE-BY-LINE
            FOR record in userCheck
                listRecord = SPLIT record INTO LIST WITH(",")
                IF username == listRecord LOCATION 0 THEN
                    IF password == listRecord LOCATION 1 THEN
                        PRINT("NEWLINE- Login successful -")
                        IF (username == "john" AND password == "1234u-78") OR (username == "david" AND password == "55467913") THEN
                            UID = NONE
                        ELSE
                            OPENFILE "currentUser.txt" IN WRITE AS current
                                WRITE(record) TO current
                            CLOSEFILE
                            UID == listRecord LOCATION 2
                        CALL menu(UID,code)
                        chance = 0
                        BREAKLOOP
                        ENDIF
                    ENDIF
                ENDIF
            ELSE
                chance -= 1
                PRINT("Error, incorrect username or password.NEWLINE",chance,"chances remaining")
            ENDFOR
        CLOSEFILE
    ENDWHILE
ENDFUNCTION

FUNCTION menu(UID,code)
    DECLARE listCode,opt,exitConfirmationKey,details AS STRING
    DECLARE num AS INTEGER
    WHILE TRUE
        IF UID CONTAINS ANY VALUE THEN
            PRINT("NEWLINEMain menu:NEWLINENEWLINE[S] - Search boxNEWLINENEWLINEReview information about:NEWLINE[A] - Available ApartmentsNEWLINE[T] - My Tenant detailsNEWLINE[P] - My TransactionsNEWLINENEWLINEQuick functions:NEWLINE[D] - Print my House & Tenant DetailsNEWLINE[E] - Exit")
        ELSE
            PRINT("NEWLINEMain menu:NEWLINENEWLINE[S] - Search boxNEWLINENEWLINEReview information about:NEWLINE[A] - ApartmentsnNEWLINE[T] - TenantNEWLINE[P] - TransactionNEWLINENEWLINEQuick functions:NEWLINE[D] - Print Specific House & Tenant DetailsNEWLINE[I] - Inquiry of Past Tenant DetailsNEWLINE[E] - Exit")
        ENDIF
        PRINT("NEWLINEPlease select which operation that you want to do: ")
        GET opt
        IF opt IN ["S","s"] THEN
            CALL searchbox(UID,code)
        ELSEIF opt IN ["A","a"] THEN
            listCode = "a"
            CALL apartment(UID,listCode,code)
        ELSEIF opt IN ["P","p"] THEN
            listCode = "p"
            CALL tenantOrTransaction(UID,listCode,code)
        ELSEIF opt IN ["T","t"] THEN
            listCode = "t"
            CALL tenantOrTransaction(UID,listCode,code)
        ELSEIF opt IN ["D","d"] THEN
            CALL tenantAndApartment(UID)
        ELSEIF opt in ["I","i"] AND UID == NONE THEN
            listCode = "t"
            num = 6
            details = "past"
            CALL searchInformation(listCode,num,details)
        ELSEIF opt IN ["E","e"] THEN
            PRINT("You're about to leave Tenant Management System. Are you sure? [Enter]-Continue, [X]-Return to main menu): ")
            GET exitConfirmationKey
            IF exitConfirmationKey IN ["X","x"] THEN
                CONTINUELOOP
            ELSE
                PRINT("Exit successful, have a nice day~")
                RETURN FALSE
            ENDIF
        ELSE
            code = 0
            CALL message(code)
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION message(code)
    DECLARE x,y,z AS STRING
    x = "Error, "
    y = "Incorrect "
    z = " Please try again."
    IF code == 0 THEN
        PRINT("NEWLINE"+x+y+"input."+z)
    ELSEIF code == 1 THEN
        PRINT("NEWLINE"+x+y+"data type present."+z)
    ELSEIF code == 2 THEN
        PRINT("NEWLINE"+x+y+"format."+z)
    ELSEIF code == 3 THEN
        PRINT("NEWLINE"+x+y+"length."+z)
    ELSEIF code == 4 THEN
        PRINT("NEWLINE"+x+"data not found.")
    ELSEIF code == 5 THEN
        PRINT("NEWLINE"+x+"zero input."+z)
    ENDIF
ENDFUNCTION

FUNCTION specialCharacterList(SCL)
    DECLARE list AS ARRAY
    IF SCL == NONE THEN
        list = ["~","`","!","@","#","$","%","^","&","*","(",")","-","_","=","+","{","}","[","]","|",",","\'",".","/","<",">","?",";",":","'",'"']
    ELIF SCL == "SCL1" THEN
        list = ['~','`','!','@','#','$','%','^','&','*','(',')','-','_','=','+','{','}','[',']','|',',','\\','\'','\"','.','/','<','>','?',';',':']
    ELIF SCL == "SCL2" THEN
        list = ['~','`','!','@','#','$','%','^','&','*','_','=','+','{','}','[',']','|','\\','\'','\"',',','.','/','<','>','?',':',';']
    ENDIF
    RETURN list
ENDFUNCTION

FUNCTION listIdentifier(listCode)
    DECLARE l AS STRING
    IF listCode == "t" THEN
        l = "tenant.txt"
    ELSEIF listcode == "a" THEN
        l = "Apartment.txt"
    ELSEIF listcode == "p" THEN
        l = "transaction.txt"
    ELSEIF listcode == "u" THEN
        l = "user.txt"
    ENDIF
    RETURN l
ENDFUNCTION

FUNCTION appendFile(list,listCode)
    DECLARE l AS STRING
    DECLARE fAppend AS FILE
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN APPEND AS fAppend
        FOR item IN list
            WRITE item TO fAppend
            WRITE "," TO fAppend
        ENDFOR
        WRITE "NEWLINE" TO fAppend
    CLOSEFILE
ENDFUNCTION

FUNCTION readFile(listCode)
    DECLARE l,stripped AS STRING
    DECLARE line AS ARRAY
    DECLARE fRead AS FILE
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS fRead
        line = READ fRead LINE-BY-LINE
        FOR record IN line
            stripped = record RIGHTSTRIP(",NEWLINE")
            PRINT(INDEX OF line LOCATION record +1,stripped,"NEWLINE")
        ENDFOR
    CLOSEFILE
ENDFUNCTION

FUNCTION chooseItem(UID,listCode,displayColumn,currentColumn)
    DECLARE index AS STRING
    DECLARE code,listLength AS INTEGER
    DECLARE displayRecord,currentRecord AS ARRAY
    CALL searchColumn(listCode,displayColumn,UID) RETURNING displayRecord
    CALL searchColumn(listCode,currentColumn,UID) RETURNING currentRecord
    listLength = LENGTH(displayRecord)
    FOR item FROM 0 TO listLength STEP 2
        TRY
            PRINT(displayRecord LOCATION item,"   ",displayRecord LOCATION item+1)
        EXCEPT INDEXERROR
            PRINT(displayRecord LOCATION item)
        ENDTRY
    ENDFOR
    WHILE TRUE
        PRINT("NEWLINENEWLINEOptions are indexed from upper-left to lower-right starting from 1 to",LENGTH(displayRecord))
        PRINT("Choose one of the options: ")
        GET index
        IF index ISDECIMAL AND  0 < INTEGER(index) < LENGTH(displayRecord)+1 THEN
            RETURN currentRecord LOCATION INTEGER(index)-1
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION gettenantID(UID,userType)
    DECLARE number,code,displayColumn,currentColumn AS INTEGER
    DECLARE path,userID AS STRING
    DECLARE userRecord AS ARRAY
    DECLARE uRead AS FILE
    IF UID CONTAINS ANY VALUE THEN
        OPENFILE "currentUser.txt" IN READ AS uRead
            userRecord = READ AND SPLIT uRead INTO LIST WITH(",")
        CLOSEFILE
        RETURN userRecord[2]
    ELSE
        WHILE TRUE
            number = NONE
            IF userType == "new" THEN
                number = 1
            ELSE
                PRINT("[1]-Generate new ID or [2]-Choose existing ID:NEWLINE")
                GET path
                IF path ISDECIMAL THEN
                    number = INTEGER(path)
                ELSE
                    code = 1
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ENDIF
            IF number == 1 THEN
                userID = CURRENT DATETIME CONVERTED INTO STRING IN FORMAT daymonthYEARHOURMINUTESECONDmicrosecond
                RETURN userID
            ELSEIF number == 2 THEN
                listCode = "t"
                displayColumn = 1
                currentColumn = 0
                CALL chooseItem(UID,listCode,displayColumn,currentColumn) RETURNING userID
                RETURN userID 
            ELSE
                code = 0
                CALL message(code)
            ENDIF
        ENDWHILE
    ENDIF
ENDFUNCTION

FUNCTION getname(code,nameType)
    DECLARE specials,nameList,SCL AS ARRAY
    DECLARE name,SCL,retry AS STRING
    SCL = NONE
    CALL specialCharacterList(SCL) RETURNING specials
    WHILE TRUE
        PRINT("Format: Name Name or Name-Name Name or Na'me Name")
        IF nameType == "tenant" THEN
            PRINT("NEWLINEEnter tenant's fullname:")
        ELSEIF nameType == "employer" THEN
            PRINT("NEWLINEEnter tenant's current employer:")
        ELSE
            PRINT("NEWLINEEnter tenant's place-city-country of birth:")
        ENDIF
        GET name
        nameList  = SPLIT name INTO LIST WITH(" ")
        IF LENGTH(nameList) >= 2 THEN
            FOR words IN nameList
                IF
                words ISALPHABET
                OR [
                FOR character IN words
                    IF(character IN specials LOCATION 12) OR (character IN specials LOCATION 22)
                ]ENDFOR THEN
                    IF words LOCATION 0 ISUPPERCASE THEN
                        code = NONE
                        CONTINUELOOP
                    ELSE THEN
                        code = 2
                        BREAKLOOP
                    ENDIF
                ELSE
                    code = 1
                    BREAKLOOP
                ENDIF
            ENDFOR
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("Error detected.")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+name+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN name
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getabbreviation(code,abbreviationType)
    DECLARE abbreviation,retry AS STRING
    WHILE TRUE
        IF abbreviationType == "gender" THEN
            PRINT("[M]-MaleNEWLINE[F]-FemaleNEWLINEEnter tenant gender:NEWLINE")
        ELSE
            PRINT("[M]-MalaysianNEWLINE[N]-non-MalaysianNEWLINEEnter tenant nationality:NEWLINE") 
        ENDIF
        GET abbreviation
        IF LENGTH(abbreviation) == 1 THEN
            IF abbreviation ISALPHABET THEN
                IF abbreviationType == "gender" THEN
                    IF abbreviation in ["M","m"] THEN
                        code = NONE
                        abbreviation = "Male"
                    ELSEIF abbreviation in ["F","f"] THEN
                        code = NONE
                        abbreviation = "Female"
                    ELSE
                        code = 0
                    ENDIF
                ELSE
                    IF abbreviation in ["M","m"] THEN
                        code = NONE
                        abbreviation = "Malaysian"
                    ELSEIF abbreviation in ["N","n"] THEN
                        code = NONE
                        abbreviation = "non-Malaysian"
                    ELSE
                        code = 0
                    ENDIF
                ENDIF
            ELSE
                code = 1
            ENDIF
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE OR code == 0 THEN
            CALL message(code)
            PRINT("Error detected.")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+abbreviation+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN abbreviation
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getpNum(code)
    DECLARE pNum,retry AS STRING
    WHILE TRUE
        PRINT("Format: ############NEWLINEEnter tenant phone number:NEWLINE")
        GET pNum
        IF 6 < LENGTH(pNum) < 16 THEN
            FOR digit IN pNum
                IF digit ISDIGIT THEN
                    code = NONE
                    CONTINUELOOP
                ELSE
                    code = 1
                    BREAKLOOP
                ENDIF
            ENDFOR
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("Error detected.")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+pNum+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN pNum
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getDate(code,dateType)
    DECLARE specials AS LIST
    DECLARE path,date,retry AS STRING
    DECLARE year,month,day AS INTEGER
    CALL specialCharacterList(NONE) RETURNING specials
    WHILE TRUE
        IF dateType == "start" THEN
            PRINT("Use current date as rental start date?NEWLINE[Y]-YesNEWLINE[Any Other Key]-NoNEWLINE")
            GET path
            IF path in ["Y","y"] THEN
                date = CURRENT DATE CONVERTED INTO STRING WITH FORMAT YEARmonthday
                PRINT("Current date:",date)
            ELSE
                PRINT("Format: YYYY/MM/DDNEWLINEEnter Rental start date:NEWLINE")
                GET date
            ENDIF
        ELSEIF dateType == "birth" THEN
            PRINT("Format: YYYY/MM/DDNEWLINEEnter tenant birth date:NEWLINE")
            GET date
        ELSE
            PRINT("Format: YYYY/MM/DDNEWLINEEnter transaction date:NEWLINE")
            GET date
        ENDIF
        IF LENGTH(date) == 10 THEN
            IF date LOCATION 4 == date LOCATION 7 == specials LOCATION 24 THEN
                year,month,day = SPLIT date INTO LIST WITH("/")
                TRY
                    DATETIME(INTEGER(year),INTEGER(month),INTEGER(day))
                    code = NONE
                EXCEPT VALUEERROR
                    code = 1
                ENDTRY
            ELSE
                code = 2
            ENDIF
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("Error detected.")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+date+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN date
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getnumber(code,numberType)
    DECLARE t,number,retry AS STRING
    DECLARE num AS INTEGER
    WHILE TRUE
        IF numberType == "workHistory" THEN
            t = "Total work history is around "
            PRINT(t+"NEWLINE[1]-1 to 2 monthNEWLINE[2]-2 to 3 monthsNEWLINE[3]-3 to 6 monthsNEWLINE[4]-6 to 9 monthsNEWLINE[5]-9 months to 1 yearNEWLINE[6]-1 to 2 yearsNEWLINE[7]-2 to 3 yearsNEWLINE[8]-3 to 4 yearsNEWLINE[9]-4 to 5 yearsNEWLINE[0]-5 years or moreNEWLINEChoose how long you have been working: ")
        ELSE
            PRINT("[1]-RM 1500~1599NEWLINE[2]-RM 1600~1699NEWLINE[3]-RM 1700~1799NEWLINE[4]-RM 1800~1899NEWLINE[5]-RM 1900~1999NEWLINE[6]-RM 2000~2099NEWLINE[7]-RM 2100~2199NEWLINE[8]-RM 2200~2499NEWLINE[9]-RM 2500~3000NEWLINE[0]-RM > 3000NEWLINEChoose tenant income range in Ringgit Malaysia: ")
        ENDIF
        GET number
        IF number ISDIGIT THEN
            num = INTEGER(number)
            IF numberType == "workHistory" THEN
                IF num == 1 THEN
                    number = t + "1 to 2 months"
                ELSEIF num == 2 THEN
                    number = t + "2 to 3 months"
                ELSEIF num == 3 THEN
                    number = t + "3 to 6 months"
                ELSEIF num == 4 THEN
                    number = t + "6 to 9 months"
                ELSEIF num == 5 THEN
                    number = t + "9 months to 1 year
                ELSEIF num == 6 THEN
                    number = t + "1 to 2 years"
                ELSEIF num == 7 THEN
                    number = t + "2 to 3 years"
                ELSEIF num == 8 THEN
                    number = t + "3 to 4 years"
                ELSEIF num == 9 THEN
                    number = t + "4 to 5 years"
                ELSEIF num == 0 THEN
                    number = t + "5 years or more"
                ELSE
                    code = 0
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ELSE
                IF num == 1 THEN
                    number = "RM 1500~1599"
                ELSEIF num == 2 THEN
                    number = "RM 1600~1699"
                ELSEIF num == 3 THEN
                    number = "RM 1700~1799"
                ELSEIF num == 4 THEN
                    number = "RM 1800~1899"
                ELSEIF num == 5 THEN
                    number = "RM 1900~1999"
                ELSEIF num == 6 THEN
                    number = "RM 2000~2099"
                ELSEIF num == 7 THEN
                    number = "RM 2100~2199"
                ELSEIF num == 8 THEN
                    number = "RM 2200~2499"
                ELSEIF num == 9 THEN
                    number = "RM 2500~3000"
                ELSEIF num == 0 THEN
                    number = "RM > 3000"
                ELSE
                    code = 0
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ENDIF
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+number+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN number
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getrental(UID)
    DECLARE rental AS STRING
    IF UID CONTAINS ANY VALUE THEN
        RETURN "Current"
    ELSE
        WHILE TRUE
            PRINT("[P]-PastNEWLINE[Any other key]-CurrentNEWLINEChoose tenant rental status(current/past)NEWLINE")
            GET rental
            IF rental IN ["P","p"] THEN
                rental = "Past"
            ELSE
                rental = "Current"
            ENDIF
            retry = input("[R]-Retry,[Any other key]-Exit using "+rental+"NEWLINE")
            IF retry IN ["R","r"] THEN
                CONTINUELOOP
            ELSE
                RETURN rental
            ENDIF
        ENDWHILE
    ENDIF
ENDFUNCTION

FUNCTION getreferenceNumber(code)
    DECLARE SCL,referenceNumber,retry AS STRING
    DECLARE specials AS ARRAY 
    SCL = NONE
    CALL specialCharacterList(SCL) RETURNING specials
    WHILE TRUE
        PRINT("Reference number comes from its relevant bank transaction. They cannot repeat.NEWLINEIf transaction is payed physically, please enter according to the format:   Tenantname year Month ; no special charactersNEWLINEEnter the reference number :NEWLINE")
        GET referenceNumber
        IF LENGTH(referenceNumber) > 5 THEN
            FOR character IN referenceNumber
                IF character NOT IN specials THEN
                    code = NONE
                    CONTINUELOOP
                ELSE
                    code = 2
                    BREAKLOOP
                ENDIF
            ENDFOR
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTIONNEWLINE")
        ELSE
            PRINT("No errors detected.NEWLINE")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+referenceNumber+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN referenceNumber
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getdecimal(code)
    DECLARE SCL,decimal,retry AS STRING
    SCL = NONE
    CALL specialCharacterList(SCL) RETURNING specials
    WHILE TRUE
        PRINT("Format: ########.##NEWLINEEnter the transaction amount in Ringgit Malaysia:NEWLINE")
        GET decimal
        IF specials LOCATION 23 IN decimal THEN
            money = SPLIT decimal INTO LIST WITH(".")
            FOR numbers IN money
                TRY
                    numbers LOCATION 1 IN money LOCATION 1
                    IF (
                    FOR digits IN numbers
                        digits ISDIGIT 
                    ENDFOR) THEN
                        code = NONE
                        CONTINUELOOP
                    ELSE
                        code = 1
                        BREAKLOOP
                    ENDIF
                EXCEPT INDEXERROR
                    code = 2
                    BREAKLOOP
                ENDTRY
            ENDFOR
        ELSE
            code = 2
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTIONNEWLINE")
        ELSE
            PRINT("No errors detected.NEWLINE")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+decimal+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            continue
        ELSE
            return "RM" + decimal
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION tenantOrTransactionEntryForm(UID,listCode,code)
    DECLARE n,UserID,name,gender,pNum,nationality,startDate,workHistory,employer,income,rental,birthDate,birthCity,referenceNumber,transactionDate,chooseList,apartmendCode,amount AS STRING
    DECLARE displayColumn,currentColumn AS INTEGER
    DECLARE list AS ARRAY
    WHILE TRUE
        IF UID == NONE
            PRINT("Number of new Records: ")
            GET n
            IF n ISDECIMAL THEN
                code = NONE
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
        ELSE
            n = 1
        ENDIF
        BREAKLOOP
    ENDWHILE
        userType = "existing"
        FOR list IN range(0,int(n))
            IF listCode == "t" THEN
                nameType = "tenant"
                abbreviationType = "gender"
                CALL gettenantID(UID,userType) RETURNING UserID
                CALL getname(code,nameType) RETURNING name
                CALL getabbreviation(code,abbreviationType) RETURNING gender
                CALL getpNum(code) RETURNING pNum
                abbreviationType = "nationality"
                dateType = "start"
                numberType = "workHistory"
                nameType = "employer"
                CALL getabbreviation(code,abbreviationType) RETURNING nationality
                CALL getDate(code,dateType) RETURNING startDate
                CALL getnumber(code,numberType) RETURNING workHistory
                CALL getname(code,nameType) RETURNING employer
                numberType = "income"
                dateType = "birth"
                nameType = "city"
                CALL getnumber(code,numberType) RETURNING income
                CALL getrental(UID) RETURNING rental
                CALL getDate(code,dateType) RETURNING birthDate
                CALL getname(code,nameType) RETURNING birthCity
                list = [UserID,name,gender,pNum,nationality,startDate,workHistory,employer,income,rental,birthDate,birthCity]
            ELSE
                dateType = "transaction"
                chooseList = "a"
                displayColumn = 0
                currentColumn = 1
                CALL getreferenceNumber(code) RETURNING referenceNumber
                CALL getDate(code,dateType) RETURNING transactionDate
                CALL gettenantID(UID,userType) RETURNING UserID
                CALL tenantAndApartment(UserID)
                CALL chooseItem(UID,chooseList,displayColumn,currentColumn) RETURNING apartmendCode
                CALL getdecimal(code) RETURNING amount
                list = [referenceNumber,transactionDate,UserID,apartmendCode,amount]
            ENDIF
            CALL appendFile(list,listCode)
        ENDFOR
ENDFUNCTION

FUNCTION tenantAndApartment(UID)
    DECLARE listCode,reference1,reference2 AS STRING
    DECLARE primaryKeys,TAList,file,list,TARecord AS ARRAY
    DECLARE pRead,tRead,aRead AS FILE
    listCode = "p"
    reference1 = "t"
    reference2 = "a"
    primaryKeys = []
    TAList = []
    TARecord = []
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS pRead
        file = READ pRead LINE-BY-LINE
        FOR record IN file
            list = SPLIT record INTO LIST WITH(",")
            IF UID CONTAINS ANY VALUE THEN
                IF UID IN list LOCATION 2 THEN
                    APPEND list LOCATION 2+","+list LOCATION 3 INTO primaryKeys
                    BREAKLOOP
                ELSE
                    CONTINUELOOP
                ENDIF
            ELSE
                IF STRING(list LOCATION 2+","+list LOCATION 3) NOT IN primaryKeys THEN
                    APPEND list LOCATION 2+","+list LOCATION 3 INTO primaryKeys
                ELSE
                    CONTINUELOOP
                ENDIF
            ENDIF
        ENDFOR
    CLOSEFILE
    FOR item IN primaryKeys
        tenantID,ApartmentCode = SPLIT item INTO LIST WITH(",")
        CALL listIdentifier(reference1) RETURNING l
        OPENFILE l IN READ AS tRead
            file = READ tRead LINE-BY-LINE
            FOR record IN file
                list = SPLIT record INTO LIST WITH(",")
                IF tenantID IN list LOCATION 0 THEN
                    APPEND list LOCATION 0+","+list LOCATION 1 INTO TARecord
                    BREAKLOOP
                ELSE
                    CONTINUELOOP
                ENDIF
            ENDFOR
        CLOSEFILE
        CALL listIdentifier(reference2) RETURNING l
        OPENFILE l IN READ AS aRead
            file = READ aRead LINE-BY-LINE
            FOR record IN file
                list = SPLIT record INTO LIST WITH(",")
                IF ApartmentCode IN list LOCATION 1 THEN
                    APPEND list LOCATION 1+","+list LOCATION 0+","+list LOCATION 3 INTO TARecord
                    BREAKLOOP
                ELSE
                    CONTINUELOOP
                ENDIF
            ENDFOR
        CLOSEFILE
        APPEND STRING(TARecord) LEFTSTRIP("[") RIGHTSTRIP("]") INTO TAList
    ENDFOR
    FOR item IN TAList
        PRINT(item)
    ENDFOR
ENDFUNCTION
      
FUNCTION tenantOrTransaction(UID,listCode,code)
    DECLARE num AS INTEGER
    DECLARE opt,modifyType AS STRING
    WHILE TRUE
        IF UID CONTAINS ANY VALUE THEN
            IF listCode == "t" THEN
                num = 0
            ELSE
                num = 2
            ENDIF
            CALL searchInformation(listCode,num,UID)
            IF listCode == "t" THEN
                PRINT("NEWLINE[C]-Change my tenant details")
            ELSE
                PRINT("[A]-Add new transaction")
            ENDIF
            PRINT("[E]-ExitNEWLINEWhat would you like to do: ")
            GET opt
            IF opt IN ["C","c"] AND listCode == "t" THEN
                modifyType = 2
                CALL modifyData(UID,listCode,code,modifyType)
            ELSEIF opt IN ["A","a"] AND listCode == "p" THEN
                modifyType = 1
                CALL modifyData(UID,listCode,code,modifyType)
            ELSEIF opt IN ["E","e"] THEN
                BREAKLOOP
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
            BREAKLOOP
        ELSE
            PRINT("[D]-Display existing Data, [M]-Modify DataNEWLINE[E]-ExitNEWLINEWhat would you like to do:")
            GET opt
            IF opt IN ["D","d"] THEN
                PRINT("Current Data:")
                CALL readFile(listCode)
            ELSEIF opt IN ["M","m"] THEN
                CALL modifyData(UID,listCode,code,None)
            ELSEIF opt IN ["E","e"] THEN
                BREAKLOOP
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
            BREAKLOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION apartment(UID,listCode,code)
    DECLARE list1,list2,list3,list4,list5,list6,list7,list8,list9,list10,list11,list12,list13,list14,list15,list16 AS STRING
    DECLARE ApartmentList AS ARRAY
    DECLARE apartmentwHandler,apartmentrHandler AS FILE
    list1 = "Room Info: Standard Room (Triple),Code: SR1,Dimensions: 140+ sqft,Pricing: RM350,Apartment ID: A01-L01-R01 to A01-L01-R21,Date of Acquisition: 03/01/2015,Rental History: 27/02/2015 rent,Status: Available"
    list2 = "Room Info: Standard Room (Twin),Code: SR2,Dimensions: 120+ sqft,Pricing: RM450,Apartment ID: A01-L01-R22 to A01-L01-R41,Date of Acquisition: 10/02/2015,Rental History: 28/03/2015 rent,Status: Available"
    list3 = "Room Info: Standard Room A/C (Triple),Code: SR3,Dimensions: 150+ sqft,Pricing: RM550,Apartment ID: A01-L02-R01 to A01-L02-R21,Date of Acquisition: 21/03/2016,Rental History: 24/04/2016 rent,Status: Available"
    list4 = "Room Info: Standard Room A/C (Twin),Code: SR4,Dimensions: 130+ sqft,Pricing: RM650,Apartment ID: A01-L02-R22 to A01-L02-R41,Date of Acquisition: 02/04/2016,Rental History: 20/05/2016 rent,Status: Available"
    list5 = "Room Info: Deluxe Room (Triple),Code: DR1,Dimensions: 170+ sqft,Pricing: RM750,Apartment ID: A01-L04-R01 to A01-L04-R21,Date of Acquisition: 11/05/2017,Rental History: 21/06/2017 rent,Status: Available"
    list6 = "Room Info: Deluxe Room (Twin),Code: DR2,Dimensions: 160+ sqft,Pricing: RM840,Apartment ID: A01-L04-R22 to A01-L04-R41,Date of Acquisition: 22/06/2017,Rental History: 22/07/2017 rent,Status: Available"
    list7 = "Room Info: Deluxe Room A/C with shared attached bath / toilet (Triple),Code: DR3,Dimensions: 180+ sqft,Pricing: RM950,Apartment ID: A01-L03-R1 to A01-L03-R21,Date of Acquisition: 30/07/2018,Rental History: 25/08/2018 rent,Status: Available"
    list8 = "Room Info: Deluxe Room A/C with shared attached bath / toilet,Code: DR4,Dimensions: 170+ sqft,Pricing: RM1040,Apartment ID: A01-L03-R22 to A01-L03-R41,Date of Acquisition: 16/08/2018,Rental History: 18/09/2018 rent,Status: Available"
    list9 = "Room Info: Compact Premium Single,Code: CPS1,Dimensions: 130+ sqft,Pricing: RM690,Apartment ID: A01-L05-R01 to A01-L05-R41,Date of Acquisition: 02/09/2019,Rental History: 29/10/2019 rent,Status: Available"
    list10 = "Room Info: Medium Premium Single,Code: MPS1,Dimensions: 150+ sqft,Pricing: RM750,Apartment ID: A02-L01-R01 to A02-L01-R21,Date of Acquisition: 15/10/2019,Rental History: 31/11/2019 rent,Status: Available"
    list11 = "Room Info: Medium Premium Twin,Code: MPT1,Dimensions: 180+ sqft,Pricing: RM890,Apartment ID: A02-L02-R01 to A02-L02-R21,Date of Acquisition: 25/11/2020,Rental History: 31/12/2020 rent,Status: Available"
    list12 = "Room Info: Medium Premium with attached bath / toilet (Twin),Code: MP1,Dimensions: 180+ sqft,Pricing: RM940,Apartment ID: A02-L03-R01 to A02-L03-R21,Date of Acquisition: 30/12/2020,Rental History: 31/01/2020 rent,Status: Available"
    list13 = "Room Info: Medium Premium with attached bath / toilet (Single),Code: MP2,Dimensions: 160+ sqft,Pricing: RM1050,Apartment ID: A02-L03-R22 to A02-L03-R41,Date of Acquisition: 16/01/2021,Rental History: 28/02/2021 rent,Status: Available"
    list14 = "Room Info: En-Suite Single (Super Premium - Triple),Code: ESS3,Dimensions: 160+ sqft,Pricing: RM700,Apartment ID: A02-L04-R01 to A02-L04-R41,Date of Acquisition: 25/02/2021,Rental History: 31/03/2021 rent,Status: Available"
    list15 = "Room Info: En-Suite Single (Super Premium - Twin),Code: ESS2,Dimensions: 140+ sqft,Pricing: RM800,Apartment ID: A02-L04-R01 to A02-L04-R41,Date of Acquisition: 31/05/2022,Rental History: Empty,Status: Not Available"
    list16 = "Room Info: En-Suite Twin (Super Premium),Code: EST2,Dimensions: 200+ sqft,Pricing: RM900,Apartment ID: A02-L05-R01 to A02-L05-R41,Date of Acquisition: 26/06/2022,Rental History: Empty,Status: Not Available"
    ApartmentList = [list1,list2,list3,list4,list5,list6,list7,list8,list9,list10,list11,list12,list13,list14,list15,list16]
    OPENFILE "Apartment.txt" IN WRITE AS apartmentwHandler
        FOR record IN ApartmentList
            WRITE record TO apartmentwHandler
            WRITE ",NEWLINE" TO apartmentwHandler
        ENDFOR
    CLOSEFILE
    PRINT("\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\n- Apartment Info: -\n")
    CALL readFile(listCode)
    IF UID == NONE THEN
        modifyType = NONE
        CALL modifydata(UID,listCode,code,modifyType)
    ELSE
        RETURN FALSE
    ENDIF
ENDFUNCTION

FUNCTION modifyData(UID,listCode,code,modifyType)
    DECLARE modify AS BOOLEAN
    DECLARE dataInput AS STRING
    modify = True
    WHILE TRUE
        IF modifyType CONTAINS ANY VALUE THEN
            dataInput = modifyType
        ELSE:
            PRINT ("NEWLINE-------------------------------------------------------------------------------------------------------------------------------------------------------------------------NEWLINENEWLINEModification of records: NEWLINENEWLINE1. Add dataNEWLINE2. Edit DataNEWLINE3. Delete DataNEWLINE4. ExitNEWLINENEWLINEPlease select which operation to perform task (1-4): ")
            GET dataInput
        ENDIF
        IF dataInput == "1" THEN
            IF listCode == "a" THEN
                CALL apartmentAddData(modify,listCode) 
            ELSE
                CALL tenantOrTransactionEntryForm(UID,listCode,code)
            ENDIF
        ELSEIF dataInput==2 THEN
            CALL editData(UID,listCode,code)
        ELSEIF dataInput==3 THEN
            CALL deleteRecord(listCode,code)
        ELSEIF dataInput==4 THEN
            BREAKLOOP
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        IF UID == NONE
            CONTINUELOOP
        ELSE
            BREAKLOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION apartmentAddData(modify,listCode)
    DECLARE newroom,newroomcode,newroomdimension,newroompricing,newroomID,newroomdateofacquisition,newroomrentalhistory,newroomstatus AS STRING
    DECLARE addDataList as ARRAY
    PRINT("NEWLINEDear admin, we need your ATTENTION !NEWLINENEWLINEFor your information, all the new data will only be stored if you insert each information with the correct format provided.NEWLINENEWLINEOnce you finish each entry,a confirmation message will appear. Please ensure that the data is typed correctly before saving.NEWLINE- Now, you are required to enter new data. -NEWLINENEWLINE----------------------------------------------------------------------------------------------------------------------------------------------------------")
    CALL newRoom() RETURNING newroom
    CALL newRoomCode() RETURNING newroomcode
    CALL newRoomDimension() RETURNING newroomdimension
    CALL newRoompricing() RETURNING newroompricing
    CALL newRoomID() RETURNING newroomID
    dateType = "acquisition"
    CALL newRoomDate(dateType) RETURNING newroomdateofacquisition
    dateType = "history"
    CALL newRoomDate(dateType) RETURNING newroomrentalhistory
    CALL newRoomStatus() RETURNING newroomstatus
    addDataList = [newroom,newroomcode,newroomdimension,newroompricing,newroomID,newroomdateofacquisition,newroomrentalhistory,newroomstatus]
    PRINT("NEWLINE New Data:",addDataList)
    PRINT("NEWLINE Are you sure with the records you inserted just now? Enter to continue, 'N' to unsave: ")
    IF addDataconfirmation IN ["N","n"] Then:
        CLEAR addDataList
    ELSE
        CALL appendFile(addDataList,listCode)
        PRINT("NEWLINE- Data Saved -NEWLINENEWLINE----------------------------------------------------------------------------------------------------------------------------------------------------------")
    RETURN modify
    ENDIF
ENDFUNCTION

FUNCTION newRoom()
    DECLARE code AS INTEGER 
    DECLARE SCL,newRoom,decisionkey AS STRING
    DECLARE specials AS ARRAY
    WHILE TRUE
        code = None
        SCL = "SCL2"
        CALL specialCharacterList(SCL) RETURNING specials
        PRINT("NEWLINE Room info only contains alphabets, no numbers and special characters [Except these special characters: '(' ')' '/' '-' ]NEWLINE Example: Dual Key Premium Rooms - Single Room NEWLINE NEWLINE Room Info: ")
        GET newRoom
        IF [
        FOR character IN newRoom 
            IF (character IN specials)
        ENDFOR] THEN
            code = 2
            CALL message(code)
            PRINT("- Room info does not contain special character(s) -")
            CONTINUELOOP
        ELSE
            code = None
        ENDIF
        IF 0 <= LENGTH(newRoom) < 6 THEN:
            code = 2
            CALL message(code)
            PRINT("-  Refer to the Room Info to look for its details and format -")
            CONTINUE
        ELSE
            code = None
        ENDIF
        IF 
        newRoom ISDIGIT AND 
        ANY(LOCATION ISDIGIT FOR LOCATION IN newRoom) THEN
            code = 1
            CALL message(code)
            PRINT("- Room info does not contain number(s) -") 
            CONTINUELOOP
        ELSE
            code = None
        ENDIF
        IF code == None THEN:
            TITLE newRoom
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ['N','n'] THEN:
                CONTINUELOOP
            ELSE
                RETURN "New Room Info: " + newRoom
            ENDIF
        ELSE
            code = 2
            CALL message(code)
            PRINT("- Please fill in the correct format for room info. Refer to the description for its details and format -")
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomCode()
    WHILE TRUE
        code = None
        PRINT("NEWLINE Room code only contains alphanumeric (A combination of uppercased alphabet and number), and no special characters NEWLINE Example: DKPRS1 NEWLINE NEWLINE Room Code: ")
        GET newRoomCode
        IF LENGTH(newRoomCode) <= 1:
            code = 2
            CALL message(code)
            PRINT("- Room Code must contain at least 2 or more alphanumeric long - NEWLINE")
            CONTINUELOOP
        ELSE
            code = None
        ENDIF
        IF newRoomCode.ISALNUM() THEN:
            code = None
        ELSE
            code = 2
            CALL message(code)
            print("- Please note that room code is only acceptable when it contains alphanumeric only- NEWLINE")
            CONTINUELOOP
        ENDIF
        IF code == None:
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ["N","n"] THEN:
                CONTINUELOOP
            ELSE:
                RETURN "New Room Code: " + newRoomCode
            ENDIF
        ELSE
            code = 2
            CALL message(code)
            PRINT("- Please fill in the correct format for room code. Refer to the description for its details and format -")
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomDimension()
    WHILE TRUE
        code = None
        PRINT("NEWLINE Room Dimension only contains numbers, no alphabets and special characters (The unit (in sqft) will be provided at the back) NEWLINE Example: 300(+sqft) NEWLINE NEWLINE Room Dimension: ")
        GET newRoomDimension
        IF LENGTH(newRoomDimension) == 0:
            code = 5
            CALL message(code)
            PRINT("- Please fill in the room dimension, and room dimension must have at least 100 or more sqft - NEWLINE")
            CONTINUELOOP
        ELSE
            code = None
        ENDIF
        IF newRoomDimension ISDIGIT THEN:
            code = None
        ELSE
            code = 2
            CALL message(code)
            print("- Room dimension must consist of number(s) -")
            CONTINUELOOP
        ENDIF
        IF code == None:
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ["N","n"] THEN:
                CONTINUELOOP
            ELSE:
                RETURN "New Room Dimension: " + newRoomDimension + "+ sqft"
            ENDIF
        ELSE
            code = 2
            CALL message(code)
            PRINT("- Please fill in the correct format for room dimension. Refer to the description for its details and format -")
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomID()
    WHILE TRUE
        code = None
        PRINT("NEWLINEThis is the correct format for RoomID: A(01)-L(01)-R(01)x(to)xA(99)-L(99)-R(99), x means space NEWLINE Please enter the new Room ID: ")
        GET newRoomID
        IF 0 <= LENGTH(newRoomID) <= 25:
            PRINT("- Please fill in the new room ID with the correct format -")
            CONTINUELOOP
        ELSE
            IF (newRoomID[0] == 'A' AND newRoomID[3] == '-' AND newRoomID[4] == 'L' AND newRoomID[7] == '-' AND newRoomID[8] == 'R' AND newRoomID[11] == ' ' AND newRoomID[12] == 't' AND newRoomID[13] == 'o' AND newRoomID[14] == ' ' AND newRoomID[15] == 'A' AND newRoomID[18] == '-' AND newRoomID[19] == 'L' AND newRoomID[22] == '-' AND newRoomID[23] == 'R') THEN:
                IF ((newRoomID[1] AND newRoomID[2] AND newRoomID[5] AND newRoomID[6] AND newRoomID[9] AND newRoomID[10] AND newRoomID[16] AND newRoomID[17] AND newRoomID[20] AND newRoomID[21] AND newRoomID[24] AND newRoomID[25]) ISDIGIT) THEN
                    PRINT("Save data? (Enter to continue, 'N' to return back):")
                    GET decisionkey
                    IF decisionkey IN ["N","n"] THEN:
                        CONTINUELOOP
                    ELSE
                        RETURN "New Room ID: " + newRoomID
                ELSE
                    code = 1
                    CALL message(code)
                    CONTINUELOOP
            ELSE
                code = 2
                CALL message(code)
                PRINT("- Incorrect Room ID -")
                CONTINUELOOP
            ENDIF
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomDate(dateType)
    WHILE TRUE
        code = None
        IF dateType == 'acquisition' THEN:
            PRINT("NEWLINE Room Date of Acquisition: dd/mm/yyyy NEWLINE No special characters included, except '/' NEWLINE NEWLINE Room Acquisition Date: ")
            GET roomDate
        ELSE
            PRINT(" NEWLINE Room Rental History: (Accepted input: 'dd/mm/yyyy' or 'Empty') NEWLINE No special characters included, except '/' NEWLINE NEWLINE Room Rental History: ")
            GET roomDate
        ENDIF
        IF ANY(LOCATION ISDIGIT FOR LOCATION IN roomDate) AND LENGTH(roomDate) == 10 THEN:
            day,month,year = SPLIT date INTO LIST WITH("/")
            ValidDate = True
            TRY
                DATETIME(INTEGER(year),INTEGER(month),INTEGER(day))
                code = NONE
            EXCEPT VALUEERROR
                ValidDate = False
            ENDTRY
            IF code == None:
                PRINT("Save data? (Enter to continue, 'N' to return back): ")
                GET decisionkey
                IF decisionkey IN ["N","n"] THEN:
                    CONTINUELOOP
                ELSE:
                    RETURN "Date: " + roomDate
                ENDIF
            ELSE
                code = 2
                CALL message(code)
                PRINT("- The given date is not valid - NEWLINE")
                CONTINUELOOP
            ENDIF
        ELSE
            code = 2
            CALL message(code)
            PRINT("- Wrong Date Format (dd/mm/yyyy) - NEWLINE")
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomStatus()
    WHILE TRUE
        code = None
        PRINT("NEWLINE Room Status: [A]-Available; [Any other key]-Not Available') NEWLINE NEWLINE Room Status ( Available / Not Available ): ")
        GET newRoomStatus
        IF newRoomStatus IN ["N","n"] THEN:
            newRoomStatus = "Available"
        ELSE
            newRoomStatus = "Not Available"
        ENDIF
        IF code == None:
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ["N","n"] THEN:
                CONTINUELOOP
            ELSE:
                RETURN "Status: " + newRoomStatus
            ENDIF
        ELSE
            code = 3
            CALL message(code)
            PRINT("- Please fill in the correct format for room status. Refer to the description for its details and format -")
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION inputidentifier(UID,listCode,editDataType,code)
    IF listCode == "a" THEN:
        IF editDataType == 0 THEN:
            RETURN newRoom()                                             
        ELSE IF editDataType == 1 THEN:
            RETURN newRoomCode()                                         
        ELSE IF editDataType == 2 THEN:
            RETURN newRoomDimension()                                    
        ELSE IF editDataType == 3 THEN:
            RETURN newRoompricing()                                      
        ELSE IF editDataType == 4 THEN:
            RETURN newRoomID()                                           
        ELSE IF editDataType == 5 THEN:
            RETURN newRoomDate("acquisition")                            
        ELSE IF editDataType == 6 THEN:
            RETURN newRoomDate("history")                                
        ELSE
            RETURN newRoomStatus()
        ENDIF
    ELSE IF listCode == "t" THEN:        
        IF editDataType == 0:  
            RETURN gettenantID(UID,"existing")                           
        ELSE IF editDataType == 1 THEN:
            RETURN getname(code,"tenant")                                
        ELSE IF editDataType == 2 THEN:
            RETURN getabbreviation(code,"gender")                        
        ELSE IF editDataType == 3 THEN:
            RETURN getpNum(code)                                         
        ELSE IF editDataType == 4 THEN:
            RETURN getabbreviation(code,"nationality")                   
        ELSE IF editDataType == 5 THEN:
            RETURN getDate(code,"start")                                 
        ELSE IF editDataType == 6 THEN:
            RETURN getnumber(code,"workHistory")                         
        ELSE IF editDataType == 7 THEN:
            RETURN getname(code,"employer")                              
        ELSE IF editDataType == 8 THEN:
            RETURN getnumber(code,"income")                              
        ELSE IF editDataType == 9 THEN:
            RETURN getrental(UID)                                        
        ELSE IF editDataType == 1 THEN:
            RETURN getDate(code,"birth")                                 
        ELSE
            RETURN getname(code,"city")
        ENDIF
    ELSE   
        IF editDataType == 0:  
            RETURN getreferenceNumber(code)                              
        ELSE IF editDataType == 1 THEN:
            RETURN getDate(code,"transaction")                           
        ELSE IF editDataType == 2 THEN:
            RETURN gettenantID(UID,"existing")                           
        ELSE IF editDataType == 3 THEN:
            chooseList = "a"
            displayColumn = 0
            currentColumn = 1
            RETURN chooseItem(UID,chooseList,displayColumn,currentColumn)
        ELSE
            RETURN getdecimal(code)
        ENDIF
    ENDIF
ENDFUNCTION

FUNCTION ApartmentDataInfo()
    data = True
    WHILE data == True THEN:
        PRINT"\n[R] - Room Info [C] - Room code, [D] - Dimensions, [P] - Pricing, [A] - Apartment ID, [E] - Date of Acquisition, [H] - Rental History, [S] - Status \nAnswer: ")
        GET opt
        IF opt in ["R","r"] THEN:
            num = 0
        ELSE IF opt in ["C","c"] THEN:
            num = 1
        ELSE IF opt in ["D","d"] THEN:
            num = 2
        ELSE IF opt in ["P","p"] THEN:
            num = 3
        ELSE IF opt in ["A","a"] THEN:
            num = 4
        ELSE IF opt in ["E","e"] THEN:
            num = 5
        ELSE IF opt in ["H","h"] THEN:
            num = 6
        ELSE IF opt in ["S","s"] THEN:
            num = 7
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        RETURN num
    ENDWHILE
ENDFUNCTION

FUNCTION category(listCode,code,sourceFunction)
    WHILE TRUE THEN:
        IF listCode == "p" THEN:
            PRINT("NEWLINE [R]-Reference number,[D]-Transaction date,[T]-TenantID,[A]-Apartment code,[S]-Amount NEWLINE Choose a category: ")
            GET opt
            IF opt IN ["R","r"] THEN:
                num = 0
            ELSE IF opt IN ["D","d"] THEN:
                num = 1
            ELSE IF opt IN ["T","t"] THEN:
                num = 2
            ELSE IF opt IN ["A","a"] THEN:
                num = 3
            ELSE IF opt IN ["S","s"] THEN:
                num = 4
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
        ELSE
            IF sourceFunction == "edit" THEN:
                PRINT("NEWLINE [N]-Name,[G]-Gender,[P]-Phone number,[R]-Nationality,[D]-Rental start date,[W]-Work history,[E]-Employer,[I]-Income,[S]-Tenant status,[B]-Birthdate,[C]-Birth City")
            ELSE
                PRINT("NEWLINE [U]-User ID,[N]-Name,[G]-Gender,[P]-Phone number,[R]-Nationality,[D]-Rental start date,[W]-Work history,[E]-Employer,[I]-Income,[S]-Tenant status,[B]-Birthdate,[C]-Birth City")
            ENDIF
            PRINT("CHoose a category: ")
            GET opt
            IF opt IN ["U","u"] and sourceFunction == "search" THEN:
                num = 0
            ELSE IF opt IN ["N","n"] THEN:
                num = 1
            ELSE IF opt IN ["G","g"] THEN:
                num = 2
            ELSE IF opt IN ["R","r"] THEN:
                num = 3
            ELSE IF opt IN ["D","d"] THEN:
                num = 4
            ELSE IF opt IN ["W","w"] THEN:
                num = 5
            ELSE IF opt IN ["E","e"] THEN:
                num = 6
            ELSE IF opt IN ["I","i"] THEN:
                num = 7
            ELSE IF opt IN ["S","s"] THEN:
                num = 8
            ELSE IF opt IN ["N","n"] THEN:
                num = 9
            ELSE IF opt IN ["B","b"] THEN:
                num = 10
            ELSE IF opt IN ["C","c"] THEN:
                num = 11
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            RETURN num
            ENDIF
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION replaceOldData(listCode,recordindex,editDataType,newData)
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS Xhandler
    DEFINE updatedData AS ARRAY
    DECLARE newRecord AS ARRAY
    dataRead = READ Xhandler LINE-BY-LINE
    FOR record IN dataRead
        strippedRecord = record RIGHTSTRIP(", NEWLINE") SPLIT(",")
        IF dataRead ISINDEX(record) == INTEGER(recordindex) THEN:
            IF newData CONTAINS ANY VALUE THEN:
                strippedRecord[INTEGER(editDataType)] = newData
                newRecord = JOIN strippedRecord with ","
                APPEND(newRecord + NEWLINE) INTO updatedData
            ELSE
                CONTINUELOOP
            ENDIF
        ELSE
            APPEND RECORD INTO updatedData
    CLOSEFILE
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN WRITE AS fUpdate
        FOR record IN updatedData
            WRITE record INTO fUpdate
        ENDFOR
    CLOSEFILE
    RETURN False
ENDFUNCTION

FUNCTION editData(UID,listCode,code)
    sourceFunction == "edit"
    WHILE TRUE
        IF listCode == "a" THEN:
            editDataType = CALL ApartmentDataInfo()
        ELSE
            editDataType = CALL category(listCode,code,sourceFunction)
        ENDIF
        display = CALL searchColumn(listCode,editDataType,UID)
        oldDataFormat = False
        WHILE oldDataFormat = False
            IF UID == None THEN:
                listLength = LENGTH(display)
                FOR item IN range(0,listlength,2)
                    TRY
                        PRINT(display[item],"   ",display[item+1])
                    EXCEPT INDEXERROR
                        PRINT(display[item])
                    ENDTRY
                ENDFOR
                PRINT("NEWLINE Placement of items displayed above are labeled from upper-left to lower-right starting from 1 to",len(display))
                PRINT("NEWLINE Please enter the number of the item to edit: ")
                GET selectedData
                IF selectedData IS DECIMAL THEN:
                    recordindex = INTEGER(selectedData)-1
                    oldDataFormat = True
                ELSE
                    code = 1
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ELSE
                FOR item IN range(0,len(display))
                    IF item == len(display)-1 THEN:
                        recordindex = item
                        oldDataFormat = True
                    ELSE
                        CONTINUELOOP
                    ENDIF
            ENDIF
        ENDWHILE
        PRINT("NEWLINE Please insert the new data with the correct format: ")
        newData = CALL inputidentifier(UID,listCode,editDataType,code)
        PRINT("NEWLINE Are you sure with your records just now? ([Y]-Yes/[N]-No): ")
        GET editdataconfirmation
        IF editdataconfirmation IN ["Y","y"] THEN:
            PRINT("NEWLINE - Data updated -")
            CALL replaceOldData(listCode,recordindex,editDataType,newData)
            PRINT("NEWLINE ---------------------------------------------------------------------------------------------------------------------------------------------------------------------")
            BREAKLOOP
        ELSE IF editdataconfirmation IN ["N","n"] THEN:
            PRINT("NEWLINE ---------------------------------------------------------------------------------------------------------------------------------------------------------------------")
            BREAKLOOP
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION deleteRecord(listCode,code)
    WHILE TRUE
        PRINT("NEWLINE - Delete Data -")
        PRINT("NEWLINE 1. Delete specified records NEWLINE 2. Delete all records NEWLINE NEWLINE [E] - Exit NEWLINE NEWLINE Please select and enter which operator that you want to proceed: ")
        GET deletedata
        IF deletedata == '1' THEN:
            PRINT("NEWLINE - 1. Delete specified records -")                                           # Print message
            CALL deleteSpecApartRecord(listCode,code)
        ELSE IF deletedata == '2' THEN:
            PRINT("\n- 2. Delete all records -")                                                 # Print message
            CALL deleteAllApartrecords(listCode) 
        ELSE IF deletedata IN ["E","e"] THEN:
            BREAKLOOP
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION deleteSpecApartRecord(listCode,code)
    modify = True
    WHILE TRUE
        CALL readFile(listCode)
        PRINT("NEWLINE Which data row that you want to delete? ")
        GET selecteddatarow
        IF selecteddatarow IS DIGIT THEN
            number = INTEGER(selecteddatarow)-1
            editDataType = None
            newData = None
            PRINT("NEWLINE Are you sure that you want to delete selected record(s)? NEWLINE It will be not recovered once you hit [X]. However, you still can discard this changes by hitting any other keys if you change your mind: ")
            GET confirmation
            IF confirmation IN ["X","x"] THEN:
                CALL replaceOldData(listCode,number,editDataType,newData)
                PRINT("NEWLINE - Delete successful -")  
            ELSE
                PRINT("NEWLINE - Delete unsuccessful -")
            ENDIF
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        RETURN modify
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION apartmentDeleteData()
    modify = True
    WHILE modify == TRUE
        PRINT("NEWLINE Are you sure that you want to delete all records? NEWLINE It will be not recovered once you hit [X]. However, you still can discard this changes by hitting any other keys if you change your mind: ")
        GET confirmation
        IF confirmation IN ["X","x"] THEN:
            OPENFILE "Apartment.txt" IN READ+ AS Ahandler
            SEEK ADeletedhandler FROM LOCATION 0 
            TRUNCATE ADeletedhandler
            CLOSEFILE
            PRINT("NEWLINE - Delete successful -")
        ELSE
            PRINT("NEWLINE - Delete unsuccessful -")
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION searchColumn(listCode,num,UID)
    displaylist=[]
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS Tread
        bulkData = READ Tread LINE-BY-LINE
        FOR line IN bulkData:
            individualList = RIGHTSTRIP(", NEWLINE") SPLIT (",") line
            IF listCode == "a" THEN:
                IF INTEGER(num) < 7 THEN:
                    APPEND(individualList[num]) INTO displayList
                ELSE
                    APPEND(STRING(individualList[1])) + " ;" + STRING(individualList[num]))
                ENDIF
            ELSE
                IF UID == None
                    IF listCode == "u" THEN:
                        IF num == 0 THEN:
                            APPEND ("ID: " + STRING(individualList[num]) + " ;relevant data: " + STRING(individualList[2])) INTO displayList
                        ELSE
                            APPEND(individualList[num]) INTO displayList
                        ENDIF
                    ELSE
                        IF num == 0 THEN:
                            APPEND(individualList[num]) INTO displayList
                        ELSE
                            APPEND("ID: " + STRING(individualList[0]) + " ;relevant data: " + STRING(individualList[num])) INTO displayList
                        ENDIF
                    ENDIF
                ELSE
                    IF listCode == "t" THEN:
                        IF individualList LOCATION 0 == UID THEN:
                            IF num == 0: 
                                APPEND(individualList[num]) INTO displayList
                                BREAKLOOP
                            ELSE
                                APPEND("ID: " + STRING(individualList[0]) + " ;relevant data: " + STRING(individualList[num])) INTO displayList
                                BREAKLOOP
                            ENDIF
                        ELSE
                            APPEND displayList WITH ("")
                        ENDIF
            IF displayList == [] THEN:
                code = 5
                CALL message(code)
            ELSE
                RETURN displayList
            ENDIF           
        ENDFOR
    CLOSEFILE
ENDFUNCTION

FUNCTION searchBox(UID,code)
    WHILE TRUE
        PRINT("NEWLINE ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- NEWLINE NEWLINE Welcome to search box!")
        sourceFunction = "search"
        num = None
        PRINT("NEWLINE 1. Search room specific details. NEWLINE 2. Search transaction details. NEWLINE 3. Search specific tenant details. NEWLINE NEWLINE 4. Exit search box. NEWLINE")
        PRINT("NEWLINE Please type the search criteria based on the keywords above: NEWLINE")
        GET option
        IF option IS DIGIT AND option == "1" THEN
            listCode = "a"
            PRINT("NEWLINE [C]-Room code, [D]- Dimension, [P]-Pricing, [A]- Apartment ID, [E]-Date of Acquisition, [R]-Rental History NEWLINE Search?  ")
            GET opt
            IF opt IN ["C","c"] THEN
                num = 1
            ELSE IF opt IN ["D","d"] THEN
                num = 2
            ELSE IF opt IN ["P","p"] THEN
                num = 3
            ELSE IF opt IN ["A","a"] THEN
                num = 4
            ELSE IF opt IN ["E","e"] THEN
                num = 5
            ELSE IF opt IN ["R","r"] THEN
                num = 6
            ELSE:
                code = 0
                CALL message(code)
                CONTINUELOOP
            PRINT(searchColumn(listCode,num,UID))
            ENDIF
        ELSEIF option ISDIGIT AND option == "2" THEN
            listCode = "p"
            IF UID CONTAINS ANY VALUE THEN:
                num = 2
            ELSE THEN
                num = CALL category(listCode,code,sourceFunction)
                PRINT(searchColumn(listCode,num,UID))
            ENDIF
        ELSEIF option ISDIGIT AND option == "3" THEN
            listCode = "t"
            IF UID CONTAINS ANY VALUE THEN:
                num = 2
            ELSE THEN
                num = CALL category(listCode,code,sourceFunction)
                PRINT(searchColumn(listCode,num,UID))
            ENDIF
        ELSEIF option == 4 THEN
            BREAKLOOP
        ELSE:
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        IF UID CONTAINS ANY VALUE THEN:
            IF listCode == "a" THEN:
                details = None
            ELSE THEN
                details = UID
            ENDIF
        ELSE
            details = NONE
        ENDIF
        CALL searchinformation(listCode,num,details)
    ENDWHILE
ENDFUNCTION

FUNCTION searchInformation(listCode,num,details)
    WHILE TRUE
        IF details THEN
            searchInformation == details
        ELSE THEN
            PRINT("Select and enter text to begin search: ")
            GET searchInformation
        ENDIF
        CALL listIdentifier(listCode) RETURNING l
        OPENFILE l IN READ AS Xhandler
            PRINT("NEWLINE ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- NEWLINE NEWLINE Results: NEWLINE")
            FOR record IN Xhandler
                data = SPLIT record INTO LIST(",")
                IF searchInformation IN data LOCATION num THEN
                    PRINT(record RIGHTSTRIP(", ") RIGHTSTRIP(NEWLINE))
                    PRINT(NEWLINE)
                    recordExist = True
                ELSE THEN
                    CONTINUELOOP
                ENDIF
            IF recordExist == TRUE THEN
                code = 0
                PRINT("- Matching Records ends here -")
            ELSE THEN
                code = 4
                CALL message(code)
            BREAKLOOP
            ENDIF
            ENDFOR
        CLOSEFILE
    ENDWHILE
ENDFUNCTION

BEGIN
IMPORT datetime AS dt
DECLARE listCode,username,password AS STRING
DECLARE code AS INTEGER
listCode = "u"
code = NONE
username = NONE
password = NONE
PRINT("NEWLINE Welcome to Tenant Management System.")
PRINT("[Y]-Yes I am.NEWLINE[Any Other Key]-No,I have an existing accountNEWLINEAre you a new user: ")
GET new
IF new IN ["Y","y"] THEN
    CALL register(listCode,code) RETURNING username,password
    CALL login(listCode,code,username,password)
ELSE
    CALL login(listCode,code,username,password)
ENDIF
END
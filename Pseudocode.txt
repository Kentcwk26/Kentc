FUNCTION register(listCode,code)
    DECLARE userType,UID,username,password,userID,l AS STRING
    DECLARE userAdd AS FILE
    userType = "new"
    UID = NONE
    PRINT("Create your account's username: ")
    GET username
    PRINT("Next, create your account's password: ")
    GET password
    CALL gettenantID(UID,userType) RETURNING userID
    PRINT ("UserID is"+userID)
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN APPEND AS userAdd
        WRITE(username+","+password+","+userID+",NEWLINE") TO userAdd
    CLOSEFILE
    OPENFILE "currentUser.txt" IN WRITE AS current
        WRITE(username+","+password+","+userID+",NEWLINE") TO current
    CLOSEFILE
    listCode = "t"
    CALL tenantOrTransactionEntryForm(userID,listCode,code)
    RETURN username AND password
ENDFUNCTION

FUNCTION login(listCode,code,nameInput,passInput)
    DECLARE chance AS INTEGER
    DECLARE username,password,UID AS STRING
    DECLARE listRecord AS ARRAY
    DECLARE userInfo,current AS FILE
    chance = 3
    WHILE chance > 0
        IF nameInput AND passInput CONTAINS ANY VALUE THEN
            username = nameInput
            password = passInput
        ELSE
            PRINT("Please enter username and password to proceed.")
            PRINT("Username: ")
            GET username
            PRINT("Password: ")
            GET password
        ENDIF
        CALL listIdentifier(listCode) RETURNING l
        OPENFILE l IN READ AS userInfo
            userCheck = READ userInfo LINE-BY-LINE
            FOR record in userCheck
                listRecord = SPLIT record INTO LIST WITH(",")
                IF username == listRecord LOCATION 0 THEN
                    IF password == listRecord LOCATION 1 THEN
                        PRINT("- Login successful -")
                        IF (username == "john" AND password == "1234u-78") OR (username == "david" AND password == "55467913") THEN
                            UID = NONE
                        ELSE
                            OPENFILE "currentUser.txt" IN WRITE AS current
                                WRITE(record) TO current
                            CLOSEFILE
                            UID == listRecord LOCATION 2
                        CALL menu(UID,code)
                        chance = 0
                        BREAKLOOP
                        ENDIF
                    ENDIF
                ENDIF
            ELSE
                chance -= 1
                PRINT("Error, incorrect username or password.",chance,"chances remaining")
            ENDFOR
        CLOSEFILE
    ENDWHILE
ENDFUNCTION

FUNCTION menu(UID,code)
    DECLARE listCode,opt,exitConfirmationKey,details AS STRING
    DECLARE num AS INTEGER
    WHILE TRUE
        IF UID CONTAINS ANY VALUE THEN
            PRINT("Main menu(Tenant Page): Review information about: [A] - All Apartments [T] - My Tenant details [P] - My Transactions Quick functions: [D] - Print my House & Tenant Details [S] - Search box [E] - Exit")
        ELSE
            PRINT(" Main menu(Admin Page): Review information about: [A] - Apartments [T] - Tenant [P] - Transaction  Quick functions: [D] - Print Specific House & Tenant Details [S] - Search box [I] - Inquiry of Past Tenant Details [E] - Exit")
        ENDIF
        PRINT(" Please select which operation that you want to do: ")
        GET opt
        IF opt IN ["S","s"] THEN
            CALL searchbox(UID,code)
        ELSEIF opt IN ["A","a"] THEN
            listCode = "a"
            CALL apartment(UID,listCode,code)
        ELSEIF opt IN ["P","p"] THEN
            listCode = "p"
            CALL tenantOrTransaction(UID,listCode,code)
        ELSEIF opt IN ["T","t"] THEN
            listCode = "t"
            CALL tenantOrTransaction(UID,listCode,code)
        ELSEIF opt IN ["D","d"] THEN
            CALL tenantAndApartment(UID)
        ELSEIF opt in ["I","i"] AND UID == NONE THEN
            listCode = "t"
            num = 6
            details = "past"
            CALL searchInformation(listCode,num,details)
        ELSEIF opt IN ["E","e"] THEN
            PRINT("You're about to leave Tenant Management System. Are you sure? [Enter]-Continue, [X]-Return to main menu): ")
            GET exitConfirmationKey
            IF exitConfirmationKey IN ["X","x"] THEN
                CONTINUELOOP
            ELSE
                PRINT("Exit successful, have a nice day~")
                RETURN FALSE
            ENDIF
        ELSE
            code = 0
            CALL message(code)
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION message(code)
    DECLARE x,y,z AS STRING
    x = "Error, "
    y = "Incorrect "
    z = " Please try again."
    IF code == 0 THEN
        PRINT(x+y+"input."+z)
    ELSEIF code == 1 THEN
        PRINT(x+y+"data type present."+z)
    ELSEIF code == 2 THEN
        PRINT(x+y+"format."+z)
    ELSEIF code == 3 THEN
        PRINT(x+y+"length."+z)
    ELSEIF code == 4 THEN
        PRINT(x+"data not found.")
    ELSEIF code == 5 THEN
        PRINT(x+"zero input."+z)
    ENDIF
ENDFUNCTION

FUNCTION specialCharacterList(SCL)
    DECLARE list AS ARRAY
    IF SCL == NONE THEN
        list = ["~","`","!","@","#","$","%","^","&","*","(",")","-","_","=","+","{","}","[","]","|",",","\'",".","/","<",">","?",";",":","'",'"']
    ELIF SCL == "SCL1" THEN
        list = ['~','`','!','@','#','$','%','^','&','*','(',')','-','_','=','+','{','}','[',']','|',',','\\','\'','\"','.','/','<','>','?',';',':']
    ELIF SCL == "SCL2" THEN
        list = ['~','`','!','@','#','$','%','^','&','*','_','=','+','{','}','[',']','|','\\','\'','\"',',','.','/','<','>','?',':',';']
    ENDIF
    RETURN list
ENDFUNCTION

FUNCTION listIdentifier(listCode)
    DECLARE l AS STRING
    IF listCode == "t" THEN
        l = "tenant.txt"
    ELSEIF listcode == "a" THEN
        l = "Apartment.txt"
    ELSEIF listcode == "p" THEN
        l = "transaction.txt"
    ELSEIF listcode == "u" THEN
        l = "user.txt"
    ENDIF
    RETURN l
ENDFUNCTION

FUNCTION appendFile(list,listCode)
    DECLARE l AS STRING
    DECLARE fAppend AS FILE
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN APPEND AS fAppend
        FOR item IN list
            WRITE item TO fAppend
            WRITE "," TO fAppend
        ENDFOR
        WRITE "NEWLINE" TO fAppend
    CLOSEFILE
ENDFUNCTION

FUNCTION readFile(listCode)
    DECLARE l,stripped AS STRING
    DECLARE line AS ARRAY
    DECLARE fRead AS FILE
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS fRead
        line = READ fRead LINE-BY-LINE
        FOR record IN line
            stripped = record RIGHTSTRIP(",NEWLINE")
            PRINT(INDEX OF line LOCATION record +1,stripped)
        ENDFOR
    CLOSEFILE
ENDFUNCTION

FUNCTION chooseItem(UID,listCode,displayColumn,currentColumn)
    DECLARE index AS STRING
    DECLARE code,listLength AS INTEGER
    DECLARE displayRecord,currentRecord AS ARRAY
    CALL searchColumn(listCode,displayColumn,UID) RETURNING displayRecord
    CALL searchColumn(listCode,currentColumn,UID) RETURNING currentRecord
    listLength = LENGTH(displayRecord)
    FOR item FROM 0 TO listLength STEP 2
        TRY
            PRINT(item+1,displayRecord LOCATION item,"TAB",item+2,displayRecord LOCATION item+1)
        EXCEPT INDEXERROR
            PRINT(item+1,displayRecord LOCATION item)
        ENDTRY
    ENDFOR
    WHILE TRUE
        PRINT("Options are indexed from upper-left to lower-right starting from 1 to",LENGTH(displayRecord))
        PRINT("Choose one of the options: ")
        GET index
        IF index ISDECIMAL AND  0 < INTEGER(index) < LENGTH(displayRecord)+1 THEN
            RETURN currentRecord LOCATION INTEGER(index)-1
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION gettenantID(UID,userType)
    DECLARE number,code,displayColumn,currentColumn AS INTEGER
    DECLARE path,userID AS STRING
    DECLARE userRecord AS ARRAY
    DECLARE uRead AS FILE
    IF UID CONTAINS ANY VALUE THEN
        OPENFILE "currentUser.txt" IN READ AS uRead
            userRecord = READ AND SPLIT uRead INTO LIST WITH(",")
        CLOSEFILE
        RETURN userRecord[2]
    ELSE
        WHILE TRUE
            number = NONE
            IF userType == "new" THEN
                number = 1
            ELSE
                PRINT("[1]-Generate new ID or [2]-Choose existing ID: ")
                GET path
                IF path ISDECIMAL THEN
                    number = INTEGER(path)
                ELSE
                    code = 1
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ENDIF
            IF number == 1 THEN
                userID = CURRENT DATETIME CONVERTED INTO STRING IN FORMAT daymonthYEARHOURMINUTESECONDmicrosecond
                RETURN userID
            ELSEIF number == 2 THEN
                listCode = "t"
                displayColumn = 1
                currentColumn = 0
                CALL chooseItem(UID,listCode,displayColumn,currentColumn) RETURNING userID
                RETURN userID 
            ELSE
                code = 0
                CALL message(code)
            ENDIF
        ENDWHILE
    ENDIF
ENDFUNCTION

FUNCTION getname(code,nameType)
    DECLARE specials,nameList,SCL AS ARRAY
    DECLARE name,SCL,retry AS STRING
    SCL = NONE
    CALL specialCharacterList(SCL) RETURNING specials
    WHILE TRUE
        PRINT("Format: Name Name or Name-Name Name or Na'me Name")
        IF nameType == "tenant" THEN
            PRINT("Enter tenant's fullname:")
        ELSEIF nameType == "employer" THEN
            PRINT("Enter tenant's current employer:")
        ELSE
            PRINT("Enter tenant's place city country of birth:")
        ENDIF
        GET name
        nameList  = SPLIT name INTO LIST WITH(" ")
        IF LENGTH(nameList) >= 2 THEN
            FOR words IN nameList
                IF
                words ISALPHABET
                OR [
                FOR character IN words
                    IF(character IN specials LOCATION 12) OR (character IN specials LOCATION 22)
                ]ENDFOR THEN
                    IF words LOCATION 0 ISUPPERCASE THEN
                        code = NONE
                        CONTINUELOOP
                    ELSE THEN
                        code = 2
                        BREAKLOOP
                    ENDIF
                ELSE
                    code = 1
                    BREAKLOOP
                ENDIF
            ENDFOR
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("Error detected.")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+name+"Answer: ")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN name
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getabbreviation(code,abbreviationType)
    DECLARE abbreviation,retry AS STRING
    WHILE TRUE
        IF abbreviationType == "gender" THEN
            PRINT("[M]-Male [F]-Female Enter tenant gender: ")
        ELSE
            PRINT("[M]-Malaysian [N]-non-Malaysian Enter tenant nationality: ") 
        ENDIF
        GET abbreviation
        IF LENGTH(abbreviation) == 1 THEN
            IF abbreviation ISALPHABET THEN
                IF abbreviationType == "gender" THEN
                    IF abbreviation in ["M","m"] THEN
                        code = NONE
                        abbreviation = "Male"
                    ELSEIF abbreviation in ["F","f"] THEN
                        code = NONE
                        abbreviation = "Female"
                    ELSE
                        code = 0
                    ENDIF
                ELSE
                    IF abbreviation in ["M","m"] THEN
                        code = NONE
                        abbreviation = "Malaysian"
                    ELSEIF abbreviation in ["N","n"] THEN
                        code = NONE
                        abbreviation = "non-Malaysian"
                    ELSE
                        code = 0
                    ENDIF
                ENDIF
            ELSE
                code = 1
            ENDIF
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE OR code == 0 THEN
            CALL message(code)
            PRINT("Error detected.")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+abbreviation+"Answer: ")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN abbreviation
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getpNum(code)
    DECLARE pNum,retry AS STRING
    WHILE TRUE
        PRINT("Format: ############ Enter tenant phone number: ")
        GET pNum
        IF 6 < LENGTH(pNum) < 16 THEN
            FOR digit IN pNum
                IF digit ISDIGIT THEN
                    code = NONE
                    CONTINUELOOP
                ELSE
                    code = 1
                    BREAKLOOP
                ENDIF
            ENDFOR
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("Error detected.")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+pNum+"Answer: ")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN pNum
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getDate(code,dateType)
    DECLARE specials AS LIST
    DECLARE path,date,retry AS STRING
    DECLARE year,month,day AS INTEGER
    CALL specialCharacterList(NONE) RETURNING specials
    WHILE TRUE
        IF dateType == "start" THEN
            PRINT("Use current date as rental start date? [Y]-Yes [Any Other Key]-No ")
            GET path
            IF path in ["Y","y"] THEN
                date = CURRENT DATE CONVERTED INTO STRING WITH FORMAT YEARmonthday
                PRINT("Current date:",date)
            ELSE
                PRINT("Format: YYYY/MM/DD Enter Rental start date: ")
                GET date
            ENDIF
        ELSEIF dateType == "birth" THEN
            PRINT("Format: YYYY/MM/DD Enter tenant birth date: ")
            GET date
        ELSE
            PRINT("Format: YYYY/MM/DD Enter transaction date: ")
            GET date
        ENDIF
        IF LENGTH(date) == 10 THEN
            IF date LOCATION 4 == date LOCATION 7 == specials LOCATION 24 THEN
                year,month,day = SPLIT date INTO LIST WITH("/")
                TRY
                    DATETIME(INTEGER(year),INTEGER(month),INTEGER(day))
                    code = NONE
                EXCEPT VALUEERROR
                    code = 1
                ENDTRY
            ELSE
                code = 2
            ENDIF
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("Error detected.")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+date+"Answer: ")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN date
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getnumber(code,numberType)
    DECLARE t,number,retry AS STRING
    DECLARE num AS INTEGER
    WHILE TRUE
        IF numberType == "workHistory" THEN
            t = "Total work history is around "
            PRINT(t+" [1]-1 to 2 month [2]-2 to 3 months [3]-3 to 6 months [4]-6 to 9 months [5]-9 months to 1 year [6]-1 to 2 years [7]-2 to 3 years [8]-3 to 4 years [9]-4 to 5 years [0]-5 years or more Choose how long you have been working: ")
        ELSE
            PRINT("[1]-RM 1500~1599 [2]-RM 1600~1699 [3]-RM 1700~1799 [4]-RM 1800~1899 [5]-RM 1900~1999 [6]-RM 2000~2099 [7]-RM 2100~2199 [8]-RM 2200~2499 [9]-RM 2500~3000 [0]-RM > 3000 Choose tenant income range in Ringgit Malaysia: ")
        ENDIF
        GET number
        IF number ISDIGIT THEN
            num = INTEGER(number)
            IF numberType == "workHistory" THEN
                IF num == 1 THEN
                    number = t + "1 to 2 months"
                ELSEIF num == 2 THEN
                    number = t + "2 to 3 months"
                ELSEIF num == 3 THEN
                    number = t + "3 to 6 months"
                ELSEIF num == 4 THEN
                    number = t + "6 to 9 months"
                ELSEIF num == 5 THEN
                    number = t + "9 months to 1 year
                ELSEIF num == 6 THEN
                    number = t + "1 to 2 years"
                ELSEIF num == 7 THEN
                    number = t + "2 to 3 years"
                ELSEIF num == 8 THEN
                    number = t + "3 to 4 years"
                ELSEIF num == 9 THEN
                    number = t + "4 to 5 years"
                ELSEIF num == 0 THEN
                    number = t + "5 years or more"
                ELSE
                    code = 0
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ELSE
                IF num == 1 THEN
                    number = "RM 1500~1599"
                ELSEIF num == 2 THEN
                    number = "RM 1600~1699"
                ELSEIF num == 3 THEN
                    number = "RM 1700~1799"
                ELSEIF num == 4 THEN
                    number = "RM 1800~1899"
                ELSEIF num == 5 THEN
                    number = "RM 1900~1999"
                ELSEIF num == 6 THEN
                    number = "RM 2000~2099"
                ELSEIF num == 7 THEN
                    number = "RM 2100~2199"
                ELSEIF num == 8 THEN
                    number = "RM 2200~2499"
                ELSEIF num == 9 THEN
                    number = "RM 2500~3000"
                ELSEIF num == 0 THEN
                    number = "RM > 3000"
                ELSE
                    code = 0
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ENDIF
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+number+"Answer: ")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN number
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getrental(UID)
    DECLARE rental AS STRING
    IF UID CONTAINS ANY VALUE THEN
        RETURN "Current"
    ELSE
        WHILE TRUE
            PRINT("[P]-Past [Any other key]-Current Choose tenant rental status(current/past) ")
            GET rental
            IF rental IN ["P","p"] THEN
                rental = "Past"
            ELSE
                rental = "Current"
            ENDIF
            retry = input("[R]-Retry,[Any other key]-Exit using "+rental+"Answer: ")
            IF retry IN ["R","r"] THEN
                CONTINUELOOP
            ELSE
                RETURN rental
            ENDIF
        ENDWHILE
    ENDIF
ENDFUNCTION

FUNCTION getreferenceNumber(code)
    DECLARE SCL,referenceNumber,retry AS STRING
    DECLARE specials AS ARRAY 
    SCL = NONE
    CALL specialCharacterList(SCL) RETURNING specials
    WHILE TRUE
        PRINT("Reference number comes from its relevant bank transaction. They cannot repeat. If transaction is payed physically, please enter according to the format:   Tenantname year Month ; no special characters Enter the reference number : ")
        GET referenceNumber
        IF LENGTH(referenceNumber) > 5 THEN
            FOR character IN referenceNumber
                IF character NOT IN specials THEN
                    code = NONE
                    CONTINUELOOP
                ELSE
                    code = 2
                    BREAKLOOP
                ENDIF
            ENDFOR
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTION")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+referenceNumber+"Answer: ")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN referenceNumber
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getdecimal(code)
    DECLARE SCL,decimal,retry AS STRING
    SCL = NONE
    CALL specialCharacterList(SCL) RETURNING specials
    WHILE TRUE
        PRINT("Format: ########.## Enter the transaction amount in Ringgit Malaysia: ")
        GET decimal
        IF specials LOCATION 23 IN decimal THEN
            money = SPLIT decimal INTO LIST WITH(".")
            FOR numbers IN money
                TRY
                    numbers LOCATION 1 IN money LOCATION 1
                    IF (
                    FOR digits IN numbers
                        digits ISDIGIT 
                    ENDFOR) THEN
                        code = NONE
                        CONTINUELOOP
                    ELSE
                        code = 1
                        BREAKLOOP
                    ENDIF
                EXCEPT INDEXERROR
                    code = 2
                    BREAKLOOP
                ENDTRY
            ENDFOR
        ELSE
            code = 2
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTION")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+decimal+"Answer: ")
        GET retry
        IF retry IN ["R","r"] THEN
            continue
        ELSE
            return "RM" + decimal
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION tenantOrTransactionEntryForm(UID,listCode,code)
    DECLARE n,UserID,name,gender,pNum,nationality,startDate,workHistory,employer,income,rental,birthDate,birthCity,referenceNumber,transactionDate,chooseList,apartmendCode,amount AS STRING
    DECLARE displayColumn,currentColumn AS INTEGER
    DECLARE list AS ARRAY
    WHILE TRUE
        IF UID == NONE
            PRINT("Number of new Records: ")
            GET n
            IF n ISDECIMAL THEN
                code = NONE
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
        ELSE
            n = 1
        ENDIF
        BREAKLOOP
    ENDWHILE
        userType = "existing"
        FOR list FROM 0 TO int(n)
            IF listCode == "t" THEN
                nameType = "tenant"
                abbreviationType = "gender"
                CALL gettenantID(UID,userType) RETURNING UserID
                CALL getname(code,nameType) RETURNING name
                CALL getabbreviation(code,abbreviationType) RETURNING gender
                CALL getpNum(code) RETURNING pNum
                abbreviationType = "nationality"
                dateType = "start"
                numberType = "workHistory"
                nameType = "employer"
                CALL getabbreviation(code,abbreviationType) RETURNING nationality
                CALL getDate(code,dateType) RETURNING startDate
                CALL getnumber(code,numberType) RETURNING workHistory
                CALL getname(code,nameType) RETURNING employer
                numberType = "income"
                dateType = "birth"
                nameType = "city"
                CALL getnumber(code,numberType) RETURNING income
                CALL getrental(UID) RETURNING rental
                CALL getDate(code,dateType) RETURNING birthDate
                CALL getname(code,nameType) RETURNING birthCity
                list = [UserID,name,gender,pNum,nationality,startDate,workHistory,employer,income,rental,birthDate,birthCity]
            ELSE
                dateType = "transaction"
                chooseList = "a"
                displayColumn = 0
                currentColumn = 1
                CALL getreferenceNumber(code) RETURNING referenceNumber
                CALL getDate(code,dateType) RETURNING transactionDate
                CALL gettenantID(UID,userType) RETURNING UserID
                CALL tenantAndApartment(UserID)
                CALL chooseItem(UID,chooseList,displayColumn,currentColumn) RETURNING apartmendCode
                CALL getdecimal(code) RETURNING amount
                list = [referenceNumber,transactionDate,UserID,apartmendCode,amount]
            ENDIF
            CALL appendFile(list,listCode)
        ENDFOR
ENDFUNCTION

FUNCTION tenantAndApartment(UID)
    DECLARE listCode,reference1,reference2 AS STRING
    DECLARE primaryKeys,TAList,file,list,TARecord AS ARRAY
    DECLARE pRead,tRead,aRead AS FILE
    listCode = "p"
    reference1 = "t"
    reference2 = "a"
    primaryKeys = []
    TAList = []
    TARecord = []
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS pRead
        file = READ pRead LINE-BY-LINE
        FOR record IN file
            list = SPLIT record INTO LIST WITH(",")
            IF UID CONTAINS ANY VALUE THEN
                IF UID IN list LOCATION 2 THEN
                    APPEND list LOCATION 2+","+list LOCATION 3 INTO primaryKeys
                    BREAKLOOP
                ELSE
                    CONTINUELOOP
                ENDIF
            ELSE
                IF STRING(list LOCATION 2+","+list LOCATION 3) NOT IN primaryKeys THEN
                    APPEND list LOCATION 2+","+list LOCATION 3 INTO primaryKeys
                ELSE
                    CONTINUELOOP
                ENDIF
            ENDIF
        ENDFOR
    CLOSEFILE
    FOR item IN primaryKeys
        tenantID,ApartmentCode = SPLIT item INTO LIST WITH(",")
        CALL listIdentifier(reference1) RETURNING l
        OPENFILE l IN READ AS tRead
            file = READ tRead LINE-BY-LINE
            FOR record IN file
                list = SPLIT record INTO LIST WITH(",")
                IF tenantID IN list LOCATION 0 THEN
                    APPEND list LOCATION 0+","+list LOCATION 1 INTO TARecord
                    BREAKLOOP
                ELSE
                    CONTINUELOOP
                ENDIF
            ENDFOR
        CLOSEFILE
        CALL listIdentifier(reference2) RETURNING l
        OPENFILE l IN READ AS aRead
            file = READ aRead LINE-BY-LINE
            FOR record IN file
                list = SPLIT record INTO LIST WITH(",")
                IF ApartmentCode IN list LOCATION 1 THEN
                    APPEND list LOCATION 1+","+list LOCATION 0+","+list LOCATION 3 INTO TARecord
                    BREAKLOOP
                ELSE
                    CONTINUELOOP
                ENDIF
            ENDFOR
        CLOSEFILE
        APPEND STRING(TARecord) LEFTSTRIP("[") RIGHTSTRIP("]") INTO TAList
    ENDFOR
    FOR item IN TAList
        PRINT(item)
    ENDFOR
ENDFUNCTION
      
FUNCTION tenantOrTransaction(UID,listCode,code)
    DECLARE num AS INTEGER
    DECLARE opt,modifyType AS STRING
    WHILE TRUE
        IF UID CONTAINS ANY VALUE THEN
            IF listCode == "t" THEN
                num = 0
            ELSE
                num = 2
            ENDIF
            CALL searchInformation(listCode,num,UID)
            IF listCode == "t" THEN
                PRINT("[C]-Change my tenant details")
            ELSE
                PRINT("[A]-Add new transaction")
            ENDIF
            PRINT("[E]-Exit What would you like to do: ")
            GET opt
            IF opt IN ["C","c"] AND listCode == "t" THEN
                modifyType = 2
                CALL modifyData(UID,listCode,code,modifyType)
            ELSEIF opt IN ["A","a"] AND listCode == "p" THEN
                modifyType = 1
                CALL modifyData(UID,listCode,code,modifyType)
            ELSEIF opt IN ["E","e"] THEN
                BREAKLOOP
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
            BREAKLOOP
        ELSE
            PRINT("[D]-Display existing Data, [M]-Modify Data [E]-Exit What would you like to do:")
            GET opt
            IF opt IN ["D","d"] THEN
                PRINT("Current Data:")
                CALL readFile(listCode)
            ELSEIF opt IN ["M","m"] THEN
                CALL modifyData(UID,listCode,code,None)
            ELSEIF opt IN ["E","e"] THEN
                BREAKLOOP
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
            BREAKLOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION apartment(UID,listCode,code)
    DECLARE modifyType AS STRING
    PRINT("- Apartment Info: -")
    CALL readFile(listCode)
    IF UID == NONE THEN
        modifyType = NONE
        CALL modifydata(UID,listCode,code,modifyType)
    ELSE
        RETURN FALSE
    ENDIF
ENDFUNCTION

FUNCTION modifyData(UID,listCode,code,modifyType)
    DECLARE modify AS BOOLEAN
    DECLARE dataInput AS STRING
    modify = True
    WHILE TRUE
        IF modifyType CONTAINS ANY VALUE THEN
            dataInput = modifyType
        ELSE
            PRINT ("Modification of records: 1. Add data2. Edit Data3. Delete Data 4. Exit Please select which operation to perform task (1-4): ")
            GET dataInput
        ENDIF
        IF dataInput == "1" THEN
            IF listCode == "a" THEN
                CALL apartmentAddData(modify,listCode) 
            ELSE
                CALL tenantOrTransactionEntryForm(UID,listCode,code)
            ENDIF
        ELSEIF dataInput==2 THEN
            CALL editData(UID,listCode,code)
        ELSEIF dataInput==3 THEN
            CALL deleteRecord(listCode,code)
        ELSEIF dataInput==4 THEN
            BREAKLOOP
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        IF UID == NONE
            CONTINUELOOP
        ELSE
            BREAKLOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION apartmentAddData(modify,listCode)
    DECLARE newroom,newroomcode,newroomdimension,newroompricing,newroomID,newroomdateofacquisition,newroomrentalhistory,newroomstatus AS STRING
    DECLARE addDataList as ARRAY
    PRINT("Dear admin, we need your ATTENTION ! For your information, all the new data will only be stored if you insert each information with the correct format provided. Once you finish each entry,a confirmation message will appear. Please ensure that the data is typed correctly before saving. - Now, you are required to enter new data. -")
    CALL newRoom() RETURNING newroom
    CALL newRoomCode() RETURNING newroomcode
    CALL newRoomDimension() RETURNING newroomdimension
    CALL newRoompricing() RETURNING newroompricing
    CALL newRoomID() RETURNING newroomID
    dateType = "acquisition"
    CALL newRoomDate(dateType) RETURNING newroomdateofacquisition
    dateType = "history"
    CALL newRoomDate(dateType) RETURNING newroomrentalhistory
    CALL newRoomStatus() RETURNING newroomstatus
    addDataList = [newroom,newroomcode,newroomdimension,newroompricing,newroomID,newroomdateofacquisition,newroomrentalhistory,newroomstatus]
    PRINT(" New Data:",addDataList)
    PRINT(" Are you sure with the records you inserted just now? Enter to continue, 'N' to unsave: ")
    IF addDataconfirmation IN ["N","n"] THEN
        CLEAR addDataList
    ELSE
        CALL appendFile(addDataList,listCode)
        PRINT("- Data Saved -")
    RETURN modify
    ENDIF
ENDFUNCTION

FUNCTION newRoom()
    DECLARE code AS INTEGER 
    DECLARE SCL,newRoom,decisionkey AS STRING
    DECLARE specials AS ARRAY
    WHILE TRUE
        SCL = "SCL2"
        CALL specialCharacterList(SCL) RETURNING specials
        PRINT("Room info only contains alphabets, no numbers and special characters [Except these special characters: '(' ')' '/' '-' ]  Example: Dual Key Premium Rooms - Single Room     Room Info: ")
        GET newRoom
        IF [
        FOR character IN newRoom
            IF character IN specials 
        ENDFOR] THEN
            code = 2
            CALL message(code)
            PRINT("- Room info does not contain special character(s) -")
            CONTINUELOOP
        ELSEIF 0 <= LENGTH(newRoom) < 6 THEN
            code = 3
            CALL message(code)
            PRINT("-  Refer to the Room Info to look for its details and format -")
            CONTINUELOOP
        ELSEIF 
        newRoom ISDIGIT OR [
        FOR location IN newRoom
            IF location ISDIGIT
        ] ENDFOR THEN
            code = 1
            CALL message(code)
            PRINT("- Room info does not contain number(s) -") 
            CONTINUELOOP
        ELSE
            TITLE newRoom
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ['N','n'] THEN
                CONTINUELOOP
            ELSE
                RETURN "New Room Info: " + newRoom
            ENDIF
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomCode()
    DECLARE newRoomCode,decisionkey AS STRING
    DECLARE code AS INTEGER
    WHILE TRUE
        PRINT("Room code only contains alphanumeric (A combination of uppercased alphabet and number), and no special characters Example: DKPRS1    Room Code: ")
        GET newRoomCode
        IF LENGTH(newRoomCode) <= 1 THEN
            code = 3
            CALL message(code)
            PRINT("- Room Code must contain at least 2 or more alphanumeric long -")
            CONTINUELOOP
        ELSEIF NOT(newRoomCode ISALPHANUMERIC) THEN
            code = 2
            CALL message(code)
            PRINT("- Please note that room code is only acceptable when it contains alphanumeric only- ")
            CONTINUELOOP
        ELSE
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ["N","n"] THEN
                CONTINUELOOP
            ELSE
                RETURN "New Room Code: " + newRoomCode
            ENDIF
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomDimension()
    DECLARE newRoomDimension,decisionkey AS STRING
    DECLARE code AS INTEGER
    WHILE TRUE
        PRINT("Room Dimension only contains numbers, no alphabets and special characters (The unit (in sqft) will be provided at the back) Example: 300(+sqft)   Room Dimension: ")
        GET newRoomDimension
        IF LENGTH(newRoomDimension) == 0:
            code = 5
            CALL message(code)
            PRINT("- Please fill in the room dimension, and room dimension must have at least 100 or more sqft -")
            CONTINUELOOP
        ELSEIF NOT(newRoomDimension ISDIGIT) THEN
            code = 2
            CALL message(code)
            print("- Room dimension must consist of number(s) -")
            CONTINUELOOP
        ELSE
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ["N","n"] THEN
                CONTINUELOOP
            ELSE
                RETURN "New Room Dimension: " + newRoomDimension + "+ sqft"
            ENDIF
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoompricing()
    DECLARE newRoompricing,decisionkey AS STRING
    DECLARE code AS INTEGER
    WHILE TRUE
        PRINT("Room Pricing only contain numbers, no special characters (The unit (in RM) will be provided at the front)  Example: (RM)500   Room Pricing: "")
        GET newRoompricing
        IF NOT(newRoompricing ISDIGIT) THEN
            code = 2
            CALL message(code)
            PRINT("- Please fill in the room pricing, it must be in numeric and the minimum starting price starts from RM350 and above -")
            CONTINUELOOP
        ELSEIF INTEGER(newRoompricing) < 350 THEN
            code = 1
            CALL message(code)
            PRINT("- Minimum starting price starts from RM350 and above -")
            CONTINUELOOP
        ELSE
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ["N","n"] THEN
                CONTINUELOOP
            ELSE
                RETURN "Pricing: RM" + newRoompricing
            ENDIF
        ENDIF
    ENDWHILE
ENDFUNCTION
            
FUNCTION newRoomID()
    DECLARE newRoomID,decisionkey AS STRING
    DECLARE code AS INTEGER
    WHILE TRUE
        PRINT("This is the correct format for RoomID: A(01)-L(01)-R(01)x(to)xA(99)-L(99)-R(99), x means space    Please enter the new Room ID: ")
        GET newRoomID
        IF 0 <= LENGTH(newRoomID) <= 25 THEN
            code = 3
            CALL message(code)
            PRINT("- Please fill in the new room ID with the correct format -")
            CONTINUELOOP
        ELSE
            IF (newRoomID LOCATION 0 == 'A' AND newRoomID LOCATION 3 == '-' AND newRoomID LOCATION 4 == 'L' AND newRoomID LOCATION 7 == '-' AND newRoomID LOCATION 8 == 'R' AND newRoomID LOCATION 11 == ' ' AND newRoomID LOCATION 12 == 't' AND newRoomID LOCATION 13 == 'o' AND newRoomID LOCATION 14 == ' ' AND newRoomID LOCATION 15 == 'A' AND newRoomID LOCATION 18 == '-' AND newRoomID LOCATION 19 == 'L' AND newRoomID LOCATION 22 == '-' AND newRoomID LOCATION 23 == 'R') THEN
                IF (newRoomID LOCATION 1 AND newRoomID LOCATION 2 AND newRoomID LOCATION 5 AND newRoomID LOCATION 6 AND newRoomID LOCATION 9 AND newRoomID LOCATION 10 AND newRoomID LOCATION 16 AND newRoomID LOCATION 17 AND newRoomID LOCATION 20 AND newRoomID LOCATION 21 AND newRoomID LOCATION 24 AND newRoomID LOCATION 25) ISDIGIT THEN
                    PRINT("Save data? (Enter to continue, 'N' to return back):")
                    GET decisionkey
                    IF decisionkey IN ["N","n"] THEN
                        CONTINUELOOP
                    ELSE
                        RETURN "New Room ID: " + newRoomID
                    ENDIF
                ELSE
                    code = 1
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ELSE
                code = 2
                CALL message(code)
                PRINT("- Incorrect Room ID -")
                CONTINUELOOP
            ENDIF
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomDate(dateType)
    DECLARE roomDate,decisionkey AS STRING
    DECLARE code,day,month,year AS INTEGER
    WHILE TRUE
        IF dateType == 'acquisition' THEN
            PRINT("Room Date of Acquisition: dd/mm/yyyy  No special characters included, except '/'   Room Acquisition Date: ")
        ELSE
            PRINT(" Room Rental History: (Accepted input: 'dd/mm/yyyy' or 'Empty')  No special characters included, except '/'   Room Rental History: ")
        GET roomDate
        ENDIF
        IF (any(location.isdigit() FOR location IN roomDate) AND len(roomDate) == 10) THEN
            day,month,year = SPLIT roomDate INTO LIST WITH('/')
            TRY
                dt.datetime(int(year),int(month),int(day))
            EXCEPT ValueError:
                code = 2
                CALL message(code)
                PRINT("- The given date is not valid -")
                CONTINUELOOP
            ENDTRY
        ELSEIF roomDate in ["Empty","empty"] AND dateType == "history" THEN
            roomDate.title()
        ELSE
            code = 1
            CALL message(code)
            PRINT("- Invalid input-")
            continue
        PRINT("Save data? (Enter to continue, 'N' to return back):")
        GET decisionkey
        IF decisionkey in ["N","n"] THEN
            continue
        ELSE
            IF dateType == "acquisition" THEN
                RETURN "Date of Acquisition: " + roomDate
            ELSE
                RETURN "Rental History: " + roomDate
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomStatus()
    DECLARE newRoomStatus,decisionkey AS STRING
    WHILE TRUE
        PRINT("Room Status: [A]-Available; [Any other key]-Not Available')   Room Status ( Available / Not Available ): ")
        GET newRoomStatus
        IF newRoomStatus IN ["A","a"] THEN
            newRoomStatus = "Available"
        ELSE
            newRoomStatus = "Not Available"
        ENDIF
        PRINT("Save data? (Enter to continue, 'N' to return back): ")
        GET decisionkey
        IF decisionkey IN ["N","n"] THEN
            CONTINUELOOP
        ELSE
            RETURN "Status: " + newRoomStatus
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION inputidentifier(UID,listCode,editDataType,code)
    DECLARE returnvalue,dateType,userType,chooseList,displayColumn,currentColumn,nameType,abbreviationType,numberType AS STRING
    IF listCode == "a" THEN
        IF editDataType == 0 THEN
            CALL newRoom() RETURNING returnvalue
        ELSEIF editDataType == 1 THEN
            CALL newRoomCode() RETURNING returnvalue
        ELSEIF editDataType == 2 THEN
            CALL newRoomDimension() RETURNING returnvalue
        ELSEIF editDataType == 3 THEN
            CALL newRoompricing() RETURNING returnvalue
        ELSEIF editDataType == 4 THEN
            CALL newRoomID() RETURNING returnvalue
        ELSEIF editDataType == 5 THEN
            dateType = "acquisition"
            CALL newRoomDate(dateType) RETURNING returnvalue
        ELSEIF editDataType == 6 THEN
            dateType = "history"
            CALL newRoomDate(dateType) RETURNING returnvalue
        ELSE
            CALL newRoomStatus() RETURNING returnvalue
        ENDIF
    ELSEIF listCode == "t" THEN        
        IF editDataType == 0 THEN
            userType = "existing"
            CALL gettenantID(UID,userType) RETURNING returnvalue
        ELSEIF editDataType == 1 THEN
            nameType = "tenant"
            CALL getname(code,nameType) RETURNING returnvalue
        ELSEIF editDataType == 2 THEN
            abbreviationType = "gender"
            CALL getabbreviation(code,abbreviationType) RETURNING returnvalue
        ELSEIF editDataType == 3 THEN
            CALL getpNum(code) RETURNING returnvalue
        ELSEIF editDataType == 4 THEN
            abbreviationType = "nationality"
            CALL getabbreviation(code,abbreviationType) RETURNING returnvalue
        ELSEIF editDataType == 5 THEN
            dateType = "start"
            CALL getDate(code,dateType) RETURNING returnvalue
        ELSEIF editDataType == 6 THEN
            numberType = "workHistory"
            CALL getnumber(code,numberType) RETURNING returnvalue
        ELSEIF editDataType == 7 THEN
            nameType = "employer"
            CALL getname(code,nameType) RETURNING returnvalue
        ELSEIF editDataType == 8 THEN
            numberType = "income"
            CALL getnumber(code,numberType) RETURNING returnvalue
        ELSEIF editDataType == 9 THEN
            CALL getrental(UID) RETURNING returnvalue
        ELSEIF editDataType == 10 THEN
            dateType = "birth"
            CALL getDate(code,dateType) RETURNING returnvalue
        ELSE
            nameType = "city"
            CALL getname(code,nameType) RETURNING returnvalue
        ENDIF
    ELSE   
        IF editDataType == 0 THEN
            CALL getreferenceNumber(code) RETURNING returnvalue
        ELSEIF editDataType == 1 THEN
            dateType = "transaction"
            CALL getDate(code,dateType) RETURNING returnvalue
        ELSEIF editDataType == 2 THEN
            userType = "existing"
            CALL gettenantID(UID,userType) RETURNING returnvalue
        ELSEIF editDataType == 3 THEN
            chooseList = "a"
            displayColumn = 0
            currentColumn = 1
            CALL chooseItem(UID,chooseList,displayColumn,currentColumn) RETURNING returnvalue
        ELSE
            CALL getdecimal(code) RETURNING returnvalue
        ENDIF
    ENDIF
    RETURN returnvalue
ENDFUNCTION

FUNCTION ApartmentDataInfo()
    DECLARE data AS BOOLEAN
    DECLARE opt AS STRING
    DECLARE num,code AS INTEGER
    data = TRUE
    WHILE data == TRUE
        PRINT("[R] - Room Info [C] - Room code, [D] - Dimensions, [P] - Pricing, [A] - Apartment ID, [E] - Date of Acquisition, [H] - Rental History, [S] - Status Answer: ")
        GET opt
        IF opt IN ["R","r"] THEN
            num = 0
        ELSEIF opt IN ["C","c"] THEN
            num = 1
        ELSEIF opt IN ["D","d"] THEN
            num = 2
        ELSEIF opt IN ["P","p"] THEN
            num = 3
        ELSEIF opt IN ["A","a"] THEN
            num = 4
        ELSEIF opt IN ["E","e"] THEN
            num = 5
        ELSEIF opt IN ["H","h"] THEN
            num = 6
        ELSEIF opt IN ["S","s"] THEN
            num = 7
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        RETURN num
    ENDWHILE
ENDFUNCTION

FUNCTION category(listCode,code,sourceFunction)
    DECLARE opt AS STRING
    DECLARE num,code AS INTEGER
    WHILE TRUE
        IF listCode == "p" THEN
            PRINT("[R]-Reference number,[D]-Transaction date,[T]-TenantID,[A]-Apartment code,[S]-Amount  Choose a category: ")
            GET opt
            IF opt IN ["R","r"] THEN
                num = 0
            ELSEIF opt IN ["D","d"] THEN
                num = 1
            ELSEIF opt IN ["T","t"] THEN
                num = 2
            ELSEIF opt IN ["A","a"] THEN
                num = 3
            ELSEIF opt IN ["S","s"] THEN
                num = 4
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
        ELSE
            IF sourceFunction == "edit" THEN
                PRINT("[N]-Name,[G]-Gender,[P]-Phone number,[R]-Nationality,[D]-Rental start date,[W]-Work history,[E]-Employer,[I]-Income,[S]-Tenant status,[B]-Birthdate,[C]-Birth City")
            ELSE
                PRINT("[U]-User ID,[N]-Name,[G]-Gender,[P]-Phone number,[R]-Nationality,[D]-Rental start date,[W]-Work history,[E]-Employer,[I]-Income,[S]-Tenant status,[B]-Birthdate,[C]-Birth City")
            ENDIF
            PRINT("CHoose a category: ")
            GET opt
            IF opt IN ["U","u"] and sourceFunction == "search" THEN
                num = 0
            ELSEIF opt IN ["N","n"] THEN
                num = 1
            ELSEIF opt IN ["G","g"] THEN
                num = 2
            ELSEIF opt IN ["P","p"] THEN
                num = 3
            ELSEIF opt IN ["R","r"] THEN
                num = 4
            ELSEIF opt IN ["D","d"] THEN
                num = 5
            ELSEIF opt IN ["W","w"] THEN
                num = 6
            ELSEIF opt IN ["E","e"] THEN
                num = 7
            ELSEIF opt IN ["I","i"] THEN
                num = 8
            ELSEIF opt IN ["S","s"] THEN
                num = 9
            ELSEIF opt IN ["B","b"] THEN
                num = 10
            ELSEIF opt IN ["C","c"] THEN
                num = 11
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
        RETURN num
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION replaceOldData(listCode,recordindex,editDataType,newData)
    DECLARE l AS STRING
    DECLARE updatedData,newRecord,dataRead,strippedRecord AS ARRAY
    DECLARE Xhandler,fUpdate AS FILE
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS Xhandler
        updatedData = []
        newRecord = []
        dataRead = READ Xhandler LINE-BY-LINE
        FOR record IN dataRead
            strippedRecord = record RIGHTSTRIP(",NEWLINE") AND SPLIT RECORD INTO LIST WITH(",")
            IF INDEX of dataRead LOCATION record == INTEGER(recordindex) THEN
                IF newData CONTAINS ANY VALUE THEN
                    strippedRecord LOCATION INTEGER(editDataType) = newData
                    newRecord = JOIN strippedRecord INTO STRING WITH(",")
                    APPEND(newRecord + ",NEWLINE") INTO updatedData
                ELSE
                    CONTINUELOOP
                ENDIF
            ELSE
                APPEND RECORD INTO updatedData
            ENDIF
    CLOSEFILE
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN WRITE AS fUpdate
        FOR record IN updatedData
            WRITE record INTO fUpdate
        ENDFOR
    CLOSEFILE
ENDFUNCTION

FUNCTION editData(UID,listCode,code)
    DECLARE sourceFunction,selectedData,newData,editdataconfirmation AS STRING
    DECLARE editDataType,listLength,recordindex AS INTEGER
    DECLARE display AS ARRAY
    DECLARE oldDataFormat AS BOOLEAN
    sourceFunction == "edit"
    WHILE TRUE
        IF listCode == "a" THEN
            CALL ApartmentDataInfo() RETURNING editDataType
        ELSE
            CALL category(listCode,code,sourceFunction) RETURNING editDataType
        ENDIF
        CALL searchColumn(listCode,editDataType,UID) RETURNING display
        oldDataFormat = FALSE
        WHILE oldDataFormat = FALSE
            IF UID == None THEN
                listLength = LENGTH(display)
                FOR item FROM 0 TO listlength STEP 2
                    TRY
                        PRINT(item+1,display[item],"TAB",item+2,display[item+1])
                    EXCEPT INDEXERROR
                        PRINT(item+1,display[item])
                    ENDTRY
                ENDFOR
                PRINT("Placement of items displayed above are labeled from upper-left to lower-right starting from 1 to",LENGTH(display))
                PRINT("Please enter the number of the item to edit: ")
                GET selectedData
                IF selectedData ISDECIMAL THEN
                    recordindex = INTEGER(selectedData)-1
                    oldDataFormat = TRUE
                ELSE
                    code = 1
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ELSE
                FOR item FROM 0 TO LENGTH(display)
                    IF item == LENGTH(display)-1 THEN
                        recordindex = item
                        oldDataFormat = TRUE
                    ELSE
                        CONTINUELOOP
                    ENDIF
            ENDIF
        ENDWHILE
        PRINT("Please insert the new data with the correct format: ")
        CALL inputidentifier(UID,listCode,editDataType,code) RETURNING newData
        PRINT("Are you sure with your records just now? ([Y]-Yes/[N]-No): ")
        GET editdataconfirmation
        IF editdataconfirmation IN ["Y","y"] THEN
            PRINT("- Data updated -")
            CALL replaceOldData(listCode,recordindex,editDataType,newData)
            BREAKLOOP
        ELSEIF editdataconfirmation IN ["N","n"] THEN
            BREAKLOOP
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION deleteRecord(listCode,code)
    DECLARE deletedata AS STRING
    WHILE TRUE
        PRINT("- Delete Data -")
        PRINT("1. Delete specified records 2. Delete all records [E] - Exit Please select and enter which operator that you want to proceed: ")
        GET deletedata
        IF deletedata == '1' THEN
            PRINT("- 1. Delete specified records -")
            CALL deleteSpecApartRecord(listCode,code)
        ELSEIF deletedata == '2' THEN
            PRINT("- 2. Delete all records -")
            CALL deleteAllApartrecords(listCode)
        ELSEIF deletedata IN ["E","e"] THEN
            BREAKLOOP
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION deleteSpecApartRecord(listCode,code)
    DECLARE modify AS BOOLEAN
    DECALRE selecteddatarow,newData AS STRING
    DECLARE number,editDataType AS INTEGER
    modify = TRUE
    WHILE TRUE
        CALL readFile(listCode)
        PRINT("Which data row that you want to delete? ")
        GET selecteddatarow
        IF selecteddatarow ISDIGIT THEN
            number = INTEGER(selecteddatarow)-1
            editDataType = None
            newData = None
            PRINT("Are you sure that you want to delete selected record(s)?  It will be not recovered once you hit [X]. However, you still can discard this changes by hitting any other keys if you change your mind: ")
            GET confirmation
            IF confirmation IN ["X","x"] THEN
                CALL replaceOldData(listCode,number,editDataType,newData)
                PRINT("- Delete successful -")
            ELSE
                PRINT("- Delete unsuccessful -")
            ENDIF
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        RETURN modify
    ENDWHILE
ENDFUNCTION

FUNCTION deleteAllApartrecords(listCode)
    DECLARE modify AS BOOLEAN
    DECLARE Ahandler AS FILE
    DECLARE confirmation AS STRING
    modify = TRUE
    WHILE modify == TRUE
        PRINT("Are you sure that you want to delete all records? It will be not recovered once you hit [X]. However, you still can discard this changes by hitting any other keys if you change your mind: ")
        GET confirmation
        IF confirmation IN ["X","x"] THEN
            OPENFILE "Apartment.txt" IN READ+ AS ADeletedhandler
                SEEK ADeletedhandler FROM LOCATION 0
                TRUNCATE ADeletedhandler
            CLOSEFILE
            PRINT("- Delete successful -")
        ELSE
            PRINT("- Delete unsuccessful -")
        ENDIF
        RETURN modify
    ENDWHILE
ENDFUNCTION

FUNCTION searchColumn(listCode,num,UID)
    DECLARE displayList,bulkData,individualList AS ARRAY
    DECLARE Tread AS FILE
    displayList = []
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS Tread
        bulkData = READ Tread LINE-BY-LINE
        FOR line IN bulkData
            individualList = RIGHTSTRIP(",NEWLINE") SPLIT line INTO LIST WITH(",")
            IF listCode == "a" THEN
                IF INTEGER(num) < 7 THEN
                    APPEND(individualList LOCATION num) INTO displayList
                ELSE
                    APPEND(STRING(individualList LOCATION 1)) + " ;" + STRING(individualList LOCATION num))
                ENDIF
            ELSE
                IF UID == NONE THEN
                    IF listCode == "u" THEN
                        IF num == 0 THEN
                            APPEND ("ID: " + STRING(individualList LOCATION num) + " ;relevant data: " + STRING(individualList LOCATION 2)) INTO displayList
                        ELSE
                            APPEND(individualList LOCATION num) INTO displayList
                        ENDIF
                    ELSE
                        IF num == 0 THEN
                            APPEND(individualList LOCATION num) INTO displayList
                        ELSE
                            APPEND("ID: " + STRING(individualList LOCATION 0) + " ;relevant data: " + STRING(individualList LOCATION num)) INTO displayList
                        ENDIF
                    ENDIF
                ELSE
                    IF listCode == "t" THEN
                        IF individualList LOCATION 0 == UID THEN
                            IF num == 0 THEN
                                APPEND(individualList LOCATION num) INTO displayList
                                BREAKLOOP
                            ELSE
                                APPEND("ID: " + STRING(individualList LOCATION 0) + " ;relevant data: " + STRING(individualList LOCATION num)) INTO displayList
                                BREAKLOOP
                            ENDIF
                        ELSE
                            APPEND ("") INTO displayList
                        ENDIF
                    ENDIF
                ENDIF
            ENDIF           
        ENDFOR
    IF displayList == [] THEN
        code = 5
        CALL message(code)
    ELSE
        RETURN displayList
    CLOSEFILE
ENDFUNCTION

FUNCTION searchBox(UID,code)
    DECLARE sourceFunction,option,listCode,opt AS STRING
    DECLARE display AS ARRAY
    DECLARE num AS INTEGER
    WHILE TRUE
        sourceFunction = "search"
        num = NONE
        PRINT("Welcome to search box!")
        PRINT("1. Search room specific details. 2. Search transaction details. 3. Search specific tenant details. 4. Exit search box.")
        PRINT("Please type the search criteria based on the keywords above: ")
        GET option
        IF option IS DIGIT AND option == "1" THEN
            listCode = "a"
            PRINT("[C]-Room code, [D]- Dimension, [P]-Pricing, [A]- Apartment ID, [E]-Date of Acquisition, [R]-Rental History Search?  ")
            GET opt
            IF opt IN ["C","c"] THEN
                num = 1
            ELSEIF opt IN ["D","d"] THEN
                num = 2
            ELSEIF opt IN ["P","p"] THEN
                num = 3
            ELSEIF opt IN ["A","a"] THEN
                num = 4
            ELSEIF opt IN ["E","e"] THEN
                num = 5
            ELSEIF opt IN ["R","r"] THEN
                num = 6
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            CALL searchColumn(listCode,num,UID) RETURNING display
            PRINT(display)
            ENDIF
        ELSEIF option ISDIGIT AND option == "2" THEN
            listCode = "p"
            IF UID CONTAINS ANY VALUE THEN
                num = 2
            ELSE THEN
                CALL category(listCode,code,sourceFunction) RETURNING num
                CALL searchColumn(listCode,num,UID) RETURNING display
                PRINT(display)
            ENDIF
        ELSEIF option ISDIGIT AND option == "3" THEN
            listCode = "t"
            IF UID CONTAINS ANY VALUE THEN
                num = 2
            ELSE THEN
                CALL category(listCode,code,sourceFunction) RETURNING num
                CALL searchColumn(listCode,num,UID) RETURNING display
                PRINT(display)
            ENDIF
        ELSEIF option == 4 THEN
            BREAKLOOP
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        IF UID CONTAINS ANY VALUE THEN
            IF listCode == "a" THEN
                details = NONE
            ELSE THEN
                details = UID
            ENDIF
        ELSE
            details = NONE
        ENDIF
        CALL searchinformation(listCode,num,details)
    ENDWHILE
ENDFUNCTION

FUNCTION searchInformation(listCode,num,details)
    DECLARE recordExist AS BOOLEAN
    DECLARE searchInformation,l AS STRING
    DECLARE Xhandler AS FILE
    DECLARE data AS ARRAY
    WHILE TRUE
        IF details CONTAINS ANY VALUE THEN
            searchInformation == details
        ELSE
            PRINT("Select and enter text to begin search: ")
            GET searchInformation
        ENDIF
        recordExist = FALSE
        CALL listIdentifier(listCode) RETURNING l
        OPENFILE l IN READ AS Xhandler
            PRINT("Results: ")
            FOR record IN Xhandler
                data = SPLIT record INTO LIST WITH(",")
                IF searchInformation IN data LOCATION num THEN
                    PRINT(record RIGHTSTRIP(",") RIGHTSTRIP("NEWLINE"))
                    recordExist = TRUE
                ELSE
                    CONTINUELOOP
                ENDIF
            IF recordExist == TRUE THEN
                PRINT("- Matching Records ends here -")
            ELSE
                code = 4
                CALL message(code)
            BREAKLOOP
            ENDIF
            ENDFOR
        CLOSEFILE
    ENDWHILE
ENDFUNCTION

BEGIN
IMPORT datetime AS dt
DECLARE listCode,username,password AS STRING
DECLARE code AS INTEGER
listCode = "u"
code = NONE
username = NONE
password = NONE
PRINT("Welcome to Tenant Management System.")
PRINT("[Y]-Yes I am. [Any Other Key]-No,I have an existing account Are you a new user: ")
GET new
IF new IN ["Y","y"] THEN
    CALL register(listCode,code) RETURNING username,password
    CALL login(listCode,code,username,password)
ELSE
    CALL login(listCode,code,username,password)
ENDIF
END
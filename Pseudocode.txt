FUNCTION register(listCode,code)
    DECLARE userType,UID,username,password,userID,l AS STRING
    DECLARE userAdd AS FILE
    userType = "new"
    UID = NONE
    PRINT("NEWLINECreate your account's username: ")
    GET username
    PRINT("Next, create your account's password: ")
    GET password
    CALL gettenantID(UID,userType) RETURNING UserID
    PRINT ("UserID is"+UserID)
    CALL listIdentifier WITH listCode RETURNING l
    OPENFILE l IN APPEND AS userAdd
        WRITE(username+","+password+","+UserID+",NEWLINE") TO userAdd
    CLOSEFILE
    listCode = "t"
    CALL tenantOrTransactionEntryForm(UserID,listCode,code)
    RETURN username AND password
ENDFUNCTION

FUNCTION login(listCode,code,nameInput,passInput)
    DECLARE chance AS INTEGER
    DECLARE username,password,UID AS STRING
    DECLARE listRecord AS ARRAY
    DECLARE userInfo,current AS FILE
    chance = 3
    WHILE chance > 0
        IF nameInput AND passInput CONTAINS ANY VALUE THEN
            username = nameInput
            password = passInput
        ELSE
            PRINT("Please enter username and password to proceed.NEWLINE")
            PRINT("Username: ")
            GET username
            PRINT("Password: ")
            GET password
        ENDIF
        CALL listIdentifier(listCode) RETURNING l
        OPENFILE l IN READ AS userInfo
            userCheck = READ userInfo LINE-BY-LINE
            FOR record in userCheck
                listRecord = SPLIT record INTO LIST WITH(",")
                IF username == listRecord LOCATION 0 THEN
                    IF password == listRecord LOCATION 1 THEN
                        PRINT("NEWLINE- Login successful -")
                        IF (username == "john" AND password == "1234u-78") OR (username == "david" AND password == "55467913") THEN
                            UID = NONE
                        ELSE
                            OPENFILE "currentUser.txt" IN WRITE AS current
                                WRITE(record) TO current
                            CLOSEFILE
                            UID == listRecord LOCATION 2
                        CALL menu(UID,code)
                        chance = 0
                        BREAKLOOP
                        ENDIF
                    ENDIF
                ENDIF
            ELSE
                chance -= 1
                PRINT("Error, incorrect username or password.NEWLINE",chance,"chances remaining")
            ENDFOR
        CLOSEFILE
    ENDWHILE
ENDFUNCTION

FUNCTION menu(UID,code)
    DECLARE listCode,opt,exitConfirmationKey,details AS STRING
    DECLARE num AS INTEGER
    WHILE TRUE
        IF UID CONTAINS ANY VALUE THEN
            PRINT("NEWLINEMain menu:NEWLINENEWLINE[S] - Search boxNEWLINENEWLINEReview information about:NEWLINE[A] - Available ApartmentsNEWLINE[T] - My Tenant detailsNEWLINE[P] - My TransactionsNEWLINENEWLINEQuick functions:NEWLINE[D] - Print my House & Tenant DetailsNEWLINE[E] - Exit")
        ELSE
            PRINT("NEWLINEMain menu:NEWLINENEWLINE[S] - Search boxNEWLINENEWLINEReview information about:NEWLINE[A] - ApartmentsnNEWLINE[T] - TenantNEWLINE[P] - TransactionNEWLINENEWLINEQuick functions:NEWLINE[D] - Print Specific House & Tenant DetailsNEWLINE[I] - Inquiry of Past Tenant DetailsNEWLINE[E] - Exit")
        ENDIF
        PRINT("NEWLINEPlease select which operation that you want to do: ")
        GET opt
        IF opt IN ["S","s"] THEN
            CALL searchbox(UID,code)
        ELSEIF opt IN ["A","a"] THEN
            listCode = "a"
            CALL apartment(UID,listCode,code)
        ELSEIF opt IN ["P","p"] THEN
            listCode = "p"
            CALL tenantOrTransaction(UID,listCode,code)
        ELSEIF opt IN ["T","t"] THEN
            listCode = "t"
            CALL tenantOrTransaction(UID,listCode,code)
        ELSEIF opt IN ["D","d"] THEN
            CALL tenantAndApartment(UID)
        ELSEIF opt in ["I","i"] AND UID == NONE THEN
            listCode = "t"
            num = 6
            details = "past"
            CALL searchInformation(listCode,num,details)
        ELSEIF opt IN ["E","e"] THEN
            PRINT("You're about to leave Tenant Management System. Are you sure? [Enter]-Continue, [X]-Return to main menu): ")
            GET exitConfirmationKey
            IF exitConfirmationKey IN ["X","x"] THEN
                CONTINUELOOP
            ELSE
                PRINT("Exit successful, have a nice day~")
                RETURN FALSE
            ENDIF
        ELSE
            code = 0
            CALL message(code)
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION message(code)
    DECLARE x,y,z AS STRING
    x = "Error, "
    y = "Incorrect "
    z = " Please try again."
    IF code == 0 THEN
        PRINT("NEWLINE"+x+y+"input."+z)
    ELSEIF code == 1 THEN
        PRINT("NEWLINE"+x+y+"data type present."+z)
    ELSEIF code == 2 THEN
        PRINT("NEWLINE"+x+y+"format."+z)
    ELSEIF code == 3 THEN
        PRINT("NEWLINE"+x+y+"length."+z)
    ELSEIF code == 4 THEN
        PRINT("NEWLINE"+x+"data not found.")
    ELSEIF code == 5 THEN
        PRINT("NEWLINE"+x+"zero input."+z)
    ENDIF
ENDFUNCTION

FUNCTION specialCharacterList(SCL)
    DECLARE list AS ARRAY
    IF SCL == NONE THEN
        list = ["~","`","!","@","#","$","%","^","&","*","(",")","-","_","=","+","{","}","[","]","|",",","\'",".","/","<",">","?",";",":","'",'"']
    ELIF SCL == "SCL1" THEN
        list = ['~','`','!','@','#','$','%','^','&','*','(',')','-','_','=','+','{','}','[',']','|',',','\\','\'','\"','.','/','<','>','?',';',':']
    ELIF SCL == "SCL2" THEN
        list = ['~','`','!','@','#','$','%','^','&','*','_','=','+','{','}','[',']','|','\\','\'','\"',',','.','/','<','>','?',':',';']
    ENDIF
    RETURN list
ENDFUNCTION

FUNCTION listIdentifier(listCode)
    DECLARE l AS STRING
    IF listCode == "t" THEN
        l = "tenant.txt"
    ELSEIF listcode == "a" THEN
        l = "Apartment.txt"
    ELSEIF listcode == "p" THEN
        l = "transaction.txt"
    ELSEIF listcode == "u" THEN
        l = "user.txt"
    ENDIF
    RETURN l
ENDFUNCTION

FUNCTION appendFile(list,listCode)
    DECLARE l AS STRING
    DECLARE fAppend AS FILE
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN APPEND AS fAppend
        FOR item IN list
            WRITE item TO fAppend
            WRITE "," TO fAppend
        ENDFOR
        WRITE "NEWLINE" TO fAppend
    CLOSEFILE
ENDFUNCTION

FUNCTION readFile(listCode)
    DECLARE l,stripped AS STRING
    DECLARE splitRecord,string AS ARRAY
    DECLARE fRead AS FILE
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS fRead
        string = READ fRead LINE-BY-LINE
        FOR record IN string
            stripped = record RIGHTSTRIP("NEWLINE") RIGHTSTRIP(",")
            splitRecord = SPLIT stripped INTO LIST(",")
            PRINT(splitRecord)
        ENDFOR
    CLOSEFILE
ENDFUNCTION

FUNCTION chooseItem(UID,listCode,displayColumn,currentColumn)
    DECLARE index AS STRING
    DECLARE code,listLength AS INTEGER
    DECLARE displayRecord,currentRecord AS ARRAY
    CALL searchColumn(listCode,displayColumn,UID) RETURNING displayRecord
    CALL searchColumn(listCode,currentColumn,UID) RETURNING currentRecord
    listLength = LENGTH(displayRecord)
    FOR item FROM 0 TO listLength STEP 2
        TRY
            PRINT(displayRecord LOCATION item,"   ",displayRecord LOCATION item+1)
        EXCEPT INDEXERROR
            PRINT(displayRecord LOCATION item)
        ENDTRY
    ENDFOR
    WHILE TRUE
        PRINT("NEWLINENEWLINEOptions are indexed from upper-left to lower-right starting from 1 to",LENGTH(displayRecord))
        PRINT("Choose one of the options: ")
        GET index
        IF index ISDECIMAL AND  0 < INTEGER(index) < LENGTH(displayRecord)+1 THEN
            RETURN currentRecord LOCATION INTEGER(index)-1
        else
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION gettenantID(UID,userType)
    DECLARE number,code,displayColumn,currentColumn AS INTEGER
    DECLARE path AS STRING
    DECLARE userRecord AS ARRAY
    DECLARE uRead AS FILE
    IF UID CONTAINS ANY VALUE THEN
        OPENFILE "currentUser.txt" IN READ AS uRead
            userRecord = READ AND SPLIT uRead INTO LIST WITH(",")
            RETURN userRecord[2]
        CLOSEFILE
    ELSE
        WHILE TRUE
            number = NONE
            IF userType == "new" THEN
                number = 1
            ELSE
                PRINT("[1]-Generate new ID or [2]-Choose existing ID:NEWLINE")
                GET path
                IF path ISDECIMAL THEN
                    number = INTEGER(path)
                ELSE
                    code = 1
                    CALL message(code)
                ENDIF
            ENDIF
            IF number == 1 THEN
                RETURN CURRENT DATETIME CONVERTED INTO STRING IN FORMAT daymonthYEARHOURMINUTESECONDmicrosecond
            ELSEIF number == 2 THEN
                listCode = "t"
                displayColumn = 1
                currentColumn = 0
                RETURN chooseItem(UID,listCode,displayColumn,currentColumn)
            ELSE
                code = 0
                CALL message(code)
            ENDIF
        ENDWHILE
    ENDIF
ENDFUNCTION

FUNCTION getname(code,nameType)
    DECLARE specials,nameList,SCL AS ARRAY
    DECLARE name,,SCL,retry AS STRING
    SCL = NONE
    CALL specialCharacterList(SCL) RETURNING specials
    WHILE TRUE
        PRINT("Format: Name Name or Name-Name Name or Na'me Name")
        IF nameType == "tenant" THEN
            PRINT("NEWLINEEnter tenant's fullname:")
        ELSEIF nameType == "employer" THEN
            PRINT("NEWLINEEnter tenant's current employer:")
        ELSE
            PRINT("NEWLINEEnter tenant's place-city-country of birth")
        ENDIF
        GET name
        nameList  = SPLIT name INTO LIST WITH(" ")
        IF LENGTH(nameList) >= 2 THEN
            FOR words IN nameList
                IF words ISALPHABET OR [character FOR character IN words IF(character IN specials LOCATION 12) OR (character IN specials LOCATION 22)] THEN
                    IF words LOCATION 0 ISUPPERCASE THEN
                        code = NONE
                        CONTINUELOOP
                    ELSE THEN
                        code = 2
                        BREAKLOOP
                    ENDIF
                ELSE
                    code = 1
                    BREAKLOOP
                ENDIF
            ENDFOR
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTION")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+name+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN name
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getabbreviation(code,abbreviationType)
    DECLARE abbreviation,retry AS STRING
    WHILE TRUE
        IF abbreviationType == "gender" THEN
            PRINT("[M]-MaleNEWLINE[F]-FemaleNEWLINEEnter tenant gender:NEWLINE")
        ELSE
            PRINT("[M]-MalaysianNEWLINE[N]-non-MalaysianNEWLINEEnter tenant nationality:NEWLINE") 
        ENDIF
        GET abbreviation
        IF LENGTH(abbreviation) == 1 THEN
            IF abbreviation ISALPHABET THEN
                IF abbreviationType == "gender" THEN
                    IF abbreviation in ["M","m"] THEN
                        code = NONE
                        abbreviation = "Male"
                    ELSEIF abbreviation in ["F","f"] THEN
                        code = NONE
                        abbreviation = "Female"
                    ELSE
                        code = 0
                    ENDIF
                ELSE
                    IF abbreviation in ["M","m"] THEN
                        code = NONE
                        abbreviation = "Malaysian"
                    ELSEIF abbreviation in ["N","n"] THEN
                        code = NONE
                        abbreviation = "non-Malaysian"
                    ELSE
                        code = 0
                    ENDIF
                ENDIF
            ELSE
                code = 1
            ENDIF
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE OR code == 0 THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTION")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+abbreviation+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN abbreviation
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getpNum(code)
    DECLARE pNum,retry AS STRING
    WHILE TRUE
        PRINT("Format: ############NEWLINEEnter tenant phone number:NEWLINE")
        GET pNum
        IF 6 < LENGTH(pNum) < 16 THEN
            FOR digit IN pNum
                IF digit ISDIGIT THEN
                    code = NONE
                    CONTINUELOOP
                ELSE
                    code = 1
                    BREAKLOOP
                ENDIF
            ENDFOR
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTION")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+pNum+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN pNum
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getDate(code,dateType)
    DECLARE specials AS LIST
    DECLARE path,date,retry AS STRING
    DECLARE year,month,day AS INTEGER
    CALL specialCharacterList(NONE) RETURNING specials
    WHILE TRUE
        IF dateType == "start" THEN
            PRINT("Use current date as rental start date?NEWLINE[Y]-YesNEWLINE[Any Other Key]-NoNEWLINE")
            GET path
            IF path in ["Y","y"] THEN
                date = CURRENT DATE CONVERTED INTO STRING WITH FORMAT YEARmonthday
                PRINT("Current date:",date) 
            ELSE
                PRINT("Format: YYYY/MM/DDNEWLINEEnter Rental start date:NEWLINE")
                GET date
            ENDIF
        ELSEIF dateType == "birth" THEN
            PRINT("Format: YYYY/MM/DDNEWLINEEnter tenant birth date:NEWLINE")
            GET date
        ELSE
            PRINT("Format: YYYY/MM/DDNEWLINEEnter transaction date:NEWLINE")
            GET date
        ENDIF
        IF LENGTH(date) == 10 THEN
            IF date LOCATION 4 == date LOCATION 7 == specials LOCATION 24 THEN
                year,month,day = SPLIT date INTO LIST WITH("/")
                TRY
                    DATETIME(INTEGER(year),INTEGER(month),INTEGER(day))
                    code = NONE
                EXCEPT VALUEERROR
                    code = 1
                ENDTRY
            ELSE
                code = 2
            ENDIF
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTION")
        ELSE
            PRINT("No errors detected.")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+date+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN date
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getnumber(code,numberType)
    DECLARE t,number AS STRING
    DECLARE num AS INTEGER
    WHILE TRUE
        IF numberType == "workHistory" THEN
            t = "Total work history is around "
            PRINT(t+"NEWLINE[1]-1 to 2 monthNEWLINE[2]-2 to 3 monthsNEWLINE[3]-3 to 6 monthsNEWLINE[4]-6 to 9 monthsNEWLINE[5]-9 months to 1 yearNEWLINE[6]-1 to 2 yearsNEWLINE[7]-2 to 3 yearsNEWLINE[8]-3 to 4 yearsNEWLINE[9]-4 to 5 yearsNEWLINE[0]-5 years or moreNEWLINEChoose how long you have been working: ")
        ELSE
            PRINT("[1]-RM 1500~1599NEWLINE[2]-RM 1600~1699NEWLINE[3]-RM 1700~1799NEWLINE[4]-RM 1800~1899NEWLINE[5]-RM 1900~1999NEWLINE[6]-RM 2000~2099NEWLINE[7]-RM 2100~2199NEWLINE[8]-RM 2200~2499NEWLINE[9]-RM 2500~3000NEWLINE[0]-RM > 3000NEWLINEChoose tenant income range in Ringgit Malaysia: ")
        ENDIF
        GET number
        IF number ISDIGIT THEN
            num = INTEGER(number)
            IF numberType == "workHistory" THEN
                IF num == 1 THEN
                    number = t + "1 to 2 months"
                ELSEIF num == 2 THEN
                    number = t + "2 to 3 months"
                ELSEIF num == 3 THEN
                    number = t + "3 to 6 months"
                ELSEIF num == 4 THEN
                    number = t + "6 to 9 months"
                ELSEIF num == 5 THEN
                    number = t + "9 months to 1 year
                ELSEIF num == 6 THEN
                    number = t + "1 to 2 years"
                ELSEIF num == 7 THEN
                    number = t + "2 to 3 years"
                ELSEIF num == 8 THEN
                    number = t + "3 to 4 years"
                ELSEIF num == 9 THEN
                    number = t + "4 to 5 years"
                ELSEIF num == 0 THEN
                    number = t + "5 years or more"
                ELSE
                    code = 0
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ELSE
                IF num == 1 THEN
                    number = "RM 1500~1599"
                ELSEIF num == 2 THEN
                    number = "RM 1600~1699"
                ELSEIF num == 3 THEN
                    number = "RM 1700~1799"
                ELSEIF num == 4 THEN
                    number = "RM 1800~1899"
                ELSEIF num == 5 THEN
                    number = "RM 1900~1999"
                ELSEIF num == 6 THEN
                    number = "RM 2000~2099"
                ELSEIF num == 7 THEN
                    number = "RM 2100~2199"
                ELSEIF num == 8 THEN
                    number = "RM 2200~2499"
                ELSEIF num == 9 THEN
                    number = "RM 2500~3000"
                ELSEIF num == 0 THEN
                    number = "RM > 3000"
                ELSE
                    code = 0
                    CALL message(code)
                    CONTINUELOOP
                ENDIF
            ENDIF
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+number+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN number
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getrental(UID)
    DECLARE rental AS STRING
    IF UID CONTAINS ANY VALUE THEN
        RETURN "Current"
    ELSE
        WHILE TRUE
            PRINT("[P]-PastNEWLINE[Any other key]-CurrentNEWLINEChoose tenant rental status(current/past)NEWLINE")
            IF rental IN ["P","p"] THEN
                rental = "Past"
            ELSE
                rental = "Current"
            ENDIF
            retry = input("[R]-Retry,[Any other key]-Exit using "+rental+"NEWLINE")
            IF retry IN ["R","r"] THEN
                CONTINUELOOP
            ELSE
                RETURN rental
            ENDIF
        ENDWHILE
    ENDIF
ENDFUNCTION

FUNCTION getreferenceNumber(code)
    DECLARE SCL,referenceNumber,retry AS STRING
    SCL = NONE
    CALL specialCharacterList(SCL) RETURNING specials
    WHILE TRUE
        PRINT("Reference number comes from its relevant bank transaction. They cannot repeat.NEWLINEIf transaction is payed physically, please enter according to the format:   Tenantname year Month ; no special charactersNEWLINEEnter the reference number :NEWLINE")
        GET referenceNumber
        IF LENGTH(referenceNumber) > 5 THEN
            FOR character IN referenceNumber
                IF character NOT IN specials THEN
                    code = NONE
                    CONTINUELOOP
                ELSE
                    code = 2
                    BREAKLOOP
                ENDIF
            ENDFOR
        ELSE
            code = 3
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTIONNEWLINE")
        ELSE
            PRINT("No errors detected.NEWLINE")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+referenceNumber+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            CONTINUELOOP
        ELSE
            RETURN referenceNumber
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION getdecimal(code)
    DECLARE SCL,decimal,retry AS STRING
    SCL = NONE
    CALL specialCharacterList(SCL) RETURNING specials
    WHILE TRUE
        PRINT("Format: ########.##NEWLINEEnter the transaction amount in Ringgit Malaysia:NEWLINE")
        GET decimal
        IF specials[23] IN decimal THEN
            money = SPLIT decimal INTO LIST WITH(".")
            FOR numbers IN money
                TRY
                    numbers LOCATION 1 IN money LOCATION 1
                    IF (digits ISDIGIT FOR digits IN numbers) THEN
                        code = NONE
                        CONTINUELOOP
                    ELSE
                        code = 1
                        BREAKLOOP
                    ENDIF
                EXCEPT INDEXERROR
                    code = 2
                    BREAKLOOP
                ENDTRY
            ENDFOR
        ELSE
            code = 2
        ENDIF
        IF code CONTAINS ANY VALUE THEN
            CALL message(code)
            PRINT("ATTENTION||Error detected.||ATTENTIONNEWLINE")
        ELSE
            PRINT("No errors detected.NEWLINE")
        ENDIF
        PRINT("[R]-Retry,[Any other key]-Exit using "+decimal+"NEWLINE")
        GET retry
        IF retry IN ["R","r"] THEN
            continue
        ELSE
            return "RM" + decimal
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION tenantOrTransactionEntryForm(UID,listCode,code)
    DECLARE n,UserID,name,gender,pNum,nationality,startDate,workHistory,employer,income,rental,birthDate,birthCity,referenceNumber,transactionDate,chooseList,apartmendCode,amount AS STRING
    DECLARE displayColumn,currentColumn AS INTEGER
    DECLARE list AS ARRAY
    WHILE TRUE
        IF UID == NONE
            PRINT("Number of new Records: ")
            GET n
            IF n ISDECIMAL THEN
                code = NONE
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
        ELSE
            n = 1
        ENDIF
        userType = "existing"
        FOR list IN range(0,int(n))
            IF listCode == "t" THEN
                CALL gettenantID(UID,userType) RETURNING UserID
                nameType = "tenant"
                CALL getname(code,nameType) RETURNING name
                abbreviationType = "gender"
                CALL getabbreviation(code,abbreviationType) RETURNING gender
                CALL getpNum(code) RETURNING pNum
                abbreviationType = "nationality"
                CALL getabbreviation(code,abbreviationType) RETURNING nationality
                dateType = "start"
                CALL getDate(code,dateType) RETURNING startDate
                numberType = "workHistory"
                CALL getnumber(code,numberType) RETURNING workHistory
                nameType = "employer"
                CALL getname(code,nameType) RETURNING employer
                numberType = "income"
                CALL getnumber(code,numberType) RETURNING income
                CALL getrental(UID) RETURNING rental
                dateType = "birth"
                CALL getDate(code,dateType) RETURNING birthDate
                nameType = "city"
                CALL getname(code,nameType) RETURNING birthCity
                list = [UserID,name,gender,pNum,nationality,startDate,workHistory,employer,income,rental,birthDate,birthCity]
            ELSE
                CALL getreferenceNumber(code) RETURNING referenceNumber
                dateType = "transaction"
                CALL getDate(code,dateType) RETURNING transactionDate
                CALL gettenantID(UID,userType) RETURNING UserID
                chooseList = "a"
                displayColumn = 0
                currentColumn = 1
                CALL tenantAndApartment(UserID)
                CALL chooseItem(UID,chooseList,displayColumn,currentColumn) RETURNING apartmendCode
                CALL getdecimal(code) RETURNING amount
                list = [referenceNumber,transactionDate,UserID,apartmendCode,amount]
            ENDIF
            CALL appendFile(list,listCode)
        ENDFOR
        BREAKLOOP
    ENDWHILE
ENDFUNCTION

FUNCTION tenantAndApartment(UID)
    DECLARE listCode,reference1,reference2, AS STRING
    DECLARE primaryKeys,TAList,file,list,TARecord AS ARRAY
    DECLARE pRead,tRead,aRead AS FILE
    listCode = "p"
    reference1 = "t"
    reference2 = "a"
    primaryKeys = []
    TAList = []
    TARecord = []
    CALL listIdentifier(listCode) RETURNING l
    OPENFILE l IN READ AS pRead
        file = READ pRead LINE-BY-LINE
        FOR record IN file
            list = SPLIT record INTO LIST WITH(",")
            IF UID CONTAINS ANY VALUE THEN
                IF UID IN list LOCATION 2 THEN
                    APPEND list LOCATION 2+","+list LOCATION 3 INTO primaryKeys
                    BREAKLOOP
                ELSE
                    CONTINUELOOP
                ENDIF
            ELSE
                IF STRING(list LOCATION 2+","+list LOCATION 3) NOT IN primaryKeys THEN
                    APPEND list LOCATION 2+","+list LOCATION 3 INTO primaryKeys
                ELSE
                    CONTINUELOOP
                ENDIF
            ENDIF
        ENDFOR
    CLOSEFILE
    FOR item IN primaryKeys
        tenantID,ApartmentCode = SPLIT item INTO LIST WITH(",")
        CALL listIdentifier(reference1) RETURNING l
        OPENFILE l IN READ AS tRead
            file = READ tRead LINE-BY-LINE
            FOR record IN file
                list = SPLIT record INTO LIST WITH(",")
                IF tenantID IN list LOCATION 0 THEN
                    APPEND list LOCATION 0+","+list LOCATION 1 INTO TARecord
                    BREAKLOOP
                ELSE
                    CONTINUELOOP
                ENDIF
            ENDFOR
        CLOSEFILE
        CALL listIdentifier(reference2) RETURNING l
        OPENFILE l IN READ AS aRead
            file = READ aRead LINE-BY-LINE
            FOR record IN file
                list = SPLIT record INTO LIST WITH(",")
                IF ApartmentCode IN list LOCATION 1 THEN
                    APPEND list LOCATION 1+","+list LOCATION 0+","+list LOCATION 3 INTO TARecord
                    BREAKLOOP
                ELSE
                    CONTINUELOOP
                ENDIF
            ENDFOR
        CLOSEFILE
        APPEND STRING(TARecord) LEFTSTRIP("[") RIGHTSTRIP("]") INTO TAList
    ENDFOR
    FOR item IN TAList
        PRINT(item)
    ENDFOR
ENDFUNCTION
      
FUNCTION tenantOrTransaction(UID,listCode,code)
    DECLARE num AS INTEGER
    DECLARE opt,modifyType AS STRING
    WHILE TRUE
        IF UID CONTAINS ANY VALUE THEN
            IF listCode == "t" THEN
                num = 0
            ELSE
                num = 2
            ENDIF
            CALL searchInformation(listCode,num,UID)
            IF listCode == "t" THEN
                PRINT("NEWLINE[C]-Change my tenant details")
            ELSE
                PRINT("[A]-Add new transaction")
            ENDIF
            PRINT("[E]-ExitNEWLINEWhat would you like to do: ")
            GET opt
            IF opt IN ["C","c"] AND listCode == "t" THEN
                modifyType = 2
                CALL modifyData(UID,listCode,code,modifyType)
            ELSEIF opt IN ["A","a"] AND listCode == "p" THEN
                modifyType = 1
                CALL modifyData(UID,listCode,code,modifyType)
            ELSEIF opt IN ["E","e"] THEN
                BREAKLOOP
            ELSE
                code = 0
                CALL message(code)
                CONTINUELOOP
            ENDIF
            BREAKLOOP
        ELSE
            PRINT("[D]-Display existing Data, [M]-Modify DataNEWLINE[E]-ExitNEWLINEWhat would you like to do:")
            GET opt
            IF opt IN ["D","d"] THEN
                PRINT("Current Data:")
                CALL readFile(listCode)
            ELSEIF opt IN ["M","m"] THEN
                CALL modifyData(UID,listCode,code,None)
            ELSEIF opt IN ["E","e"] THEN
                BREAKLOOP
            ELSE
                CALL message(0)
                CONTINUELOOP
            ENDIF
            BREAKLOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

FUNCTION apartment(UID,listCode,code)
    
    listCode = "a"
    PRINT("\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\n- Apartment Info: -\n")
    SET list1=[["Standard Room (Triple)"],["Code: SR1"],["Dimensions: 140+ sqft"],["Pricing: RM350"],["Number of Rooms: 20"],["Apartment ID: A01-L1-R1 to A01-L1-R21"]]
    SET list2=[["Standard Room (Twin)"],["Code: SR2"],["Dimensions: 120+ sqft"],["Pricing: RM450"],["Number of Rooms: 20"],["Apartment ID: A01-L1-R22 to A01-L1-R41"]]
    SET list3=[["Standard Room A/C (Triple)"],["Code: SR3"],["Dimensions: 150+ sqft"],["Pricing: RM550"],["Number of Rooms: 20"],["Apartment ID: A01-L2-R1 to A01-L2-R21"]]
    SET list4=[["Standard Room A/C (Twin)"],["Code: SR4"],["Dimensions: 130+ sqft"],["Pricing: RM650"],["Number of Rooms: 20"],["Apartment ID: A01-L2-R22 to A01-L2-R41"]]
    SET list5=[["Deluxe Room (Triple)"],["Code: DR1"],["Dimensions: 170+ sqft"],["Pricing: RM750"],["Number of Rooms: 20"],["Apartment ID: A01-L4-R1 to A01-L4-R21"]]
    SET list6=[["Deluxe Room (Twin)"],["Code: DR2"],["Dimensions: 160+ sqft"],["Pricing: RM840"],["Number of Rooms: 20"],["Apartment ID: A01-L4-R22 to A01-L4-R41"]]
    SET list7=[["Deluxe Room A/C with shared attached bath / toilet (Triple)"],["Code: DR3"],["Dimensions: 180+ sqft"],["Pricing: RM950"],["Number of Rooms: 20"],["Apartment ID: A01-L3-R1 to A01-L3-R21"]]
    SET list8=[["Deluxe Room A/C with shared attached bath / toilet"],["Code: DR4"],["Dimensions: 170+ sqft"],["Pricing: RM1040"],["Number of Rooms: 20"],["Apartment ID: A01-L3-R22 to A01-L3-R41"]]
    SET list9=[["Compact Premium Single"],["Code: CPS"],["Dimensions: 130+ sqft"],["Pricing: RM690"],["Number of Rooms: 20"],["Apartment ID: A01-L5-R1 to A01-L5-R41"]]
    SET list10=[["Medium Premium Single"],["Code: MPS"],["Dimensions: 150+ sqft"],["Pricing: RM750"],["Number of Rooms: 20"],["Apartment ID: A02-L1-R1 to A02-L1-R21"]]
    SET list11=[["Medium Premium Twin"],["Code: MPT"],["Dimensions: 180+ sqft"],["Pricing: RM890"],["Number of Rooms: 20"],["Apartment ID: A02-L2-R1 to A02-L2-R21"]]
    SET list12=[["Medium Premium with attached bath / toilet (Twin)"],["Code: MP1"],["Dimensions: 180+ sqft"],["Pricing: RM940"],["Number of Rooms: 20"],["Apartment ID: A02-L3-R1 to A02-L3-R21"]]
    SET list13=[["Medium Premium with attached bath / toilet (Single)"],["Code: MP2"],["Dimensions: 160+ sqft"],["Pricing: RM1050"],["Number of Rooms: 20"],["Apartment ID: A02-L3-R22 to A02-L3-R41"]]
    SET list14=[["En-Suite Single (Super Premium - Triple)"],["Code: ESS3"],["Dimensions: 160+ sqft"],["Pricing: RM700"],["Number of Rooms: 20"],["Apartment ID: A02-L4-R1 to A02-L4-R41"]]
    SET list15=[["En-Suite Single (Super Premium - Twin)"],["Code: ESS2"],["Dimensions: 140+ sqft"],["Pricing: RM800"],["Number of Rooms: 20"],["Apartment ID: A02-L4-R1 to A02-L4-R41"]]
    SET list16=[["En-Suite Twin (Super Premium)"],["Code: EST2"],["Dimensions: 200+ sqft"],["Pricing: RM900"],["Number of Rooms: 20"],["Apartment ID: A02-L5-R1 to A02-L5-R41"]]
    ApartmentList = [list1,list2,list3,list4,list5,list6,list7,list8,list9,list10,list11,list12,list13,list14,list15,list16] IN record

    OPENFILE "Apartment.txt" IN WRITE MODE AS apartmentwHandler
        FOR record IN apartmentwHandler
            FOR data IN record
                WRITE data TO apartmentwHandler
                WRITE ", " TO apartmentwHandler
            WRITE "NEWLINE" TO apartmentwHandler
    CLOSE Apartment.txt

    OPENFILE "Apartment.txt" IN READ MODE AS apartmentrHandler
        FOR record IN apartmentrHandler
            PRINT(record.RIGHTSTRIP(","))
    CLOSE Apartment.txt

    IF UID == None Then:
        CALLmodifydata(UID,listCode,code,None)
    ELSE
        RETURN FALSE
    ENDIF
ENDFUNCTION

FUNCTION modifyData(UID,listCode,code,modifyType)
    modify = True
    WHILE TRUE
        IF modifyType THEN:
            dataInput = modifyType
        ELSE:
            PRINT ("NEWLINE-------------------------------------------------------------------------------------------------------------------------------------------------------------------------NEWLINE NEWLINE Modification of records: -\n\n1. Add data\n2. Edit Data\n3. Delete Data\n4. Exit\n\nPlease select which operation to perform task (1-4): ')
            GET dataInput
        IF dataInput == "1" THEN
            IF listCode == "a" THEN
                CALL apartmentAddData(modify,listCode) 
            ELSE
                CALL tenantOrTransactionEntryForm(UID,listCode,code)
            ENDIF
        ELSEIF dataInput==2 THEN
            CALL editData(UID,listCode,code) 
        ELSEIF dataInput==3 THEN
            CALL deleteRecord(listCode,code)
        ELSEIF dataInput==4 THEN
            BREAKLOOP
        ELSE
            code = 0
            CALL message(code)
            CONTINUELOOP
        ENDIF
        IF UID == None
            CONTINUELOOP
        ELSE
            BREAKLOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION apartmentAddData(modify,listCode):
    DECLARE adddatalist as ARRAY
    PRINT("NEWLINEDear admin, we need your ATTENTION !\n\nFor your information, all the new data will only be stored if you insert each information with the correct format provided.\n\nOnce you finish each entry,a confirmation message will appear. Please ensure that the data is typed correctly before saving.\n- Now, you are required to enter new data. -\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------")
    CALL newRoom() RETURNING newroom
    CALL newRoomCode() RETURNING newroomcode
    CALL newRoomDimension() RETURNING newroomdimension
    CALL newRoompricing() RETURNING newroompricing
    CALL newRoomID() RETURNING newroomID
    dateType = "Acquisition"
    CALL newRoomDate(dateType) RETURNING newroomdateofacquisition
    dateTyoe = "History"
    CALL newRoomDate(dateType) RETURNING newroomrentalhistory
    CALL newRoomStatus() RETURNING newroomstatus
    APPEND [newapartment,newapartmentcode,newapartmentdimension,newapartmentpricing,newapartmentnumberofrooms,newapartmentID] in string TO adddata
    PRINT("NEWLINE New Data:",adddatalist)
    PRINT("NEWLINE Are you sure with the records you inserted just now? Enter to continue, 'N' to unsave: ")
    IF addDataconfirmation IN ["N","n"] Then:
        CLEAR adddatalist
    ELSE
        CALL appendFile(adddatalist,listCode)
        PRINT("NEWLINE- Data Saved -NEWLINE NEWLINE----------------------------------------------------------------------------------------------------------------------------------------------------------")
    RETURN modify
    ENDIF
ENDFUNCTION

FUNCTION newRoom()
    WHILE TRUE
        code = None
        SCL = "SCL2"
        specials = CALL specialCharacterList(SCL)
        PRINT("NEWLINE Room info only contains alphabets, no numbers and special characters [Except these special characters: '(' ')' '/' '-' ]NEWLINE Example: Dual Key Premium Rooms - Single Room NEWLINE NEWLINE Room Info: ")
        GET newRoom
        IF [character FOR character IN newRoom IF (character IN specials)] THEN:
            code = 2
            CALL message(code)
            PRINT("- Room info does not contain special character(s) -")
            CONTINUELoELSE
            code = None
        ENDIF
        IF 0 <= LENGTH(newRoom) < 6 THEN:
            code = 2
            CALL message(code)
            PRINT("-  Refer to the Room Info to look for its details and format -")
            CONTINUE
        ELSE
            code = None
        ENDIF
        IF newRoom ISDIGIT AND ANY(location ISDIGIT FOR location IN newRoom) THEN
            code = 1
            CALL message(code)
            PRINT("- Room info does not contain number(s) -") 
            CONTINUELOOP
        ELSE
            code = None
        ENDIF
        IF code == None THEN:
            TITLE newRoom
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            IF decisionkey IN ['N','n'] THEN:
                CONTINUELOOP
            ELSE
                RETURN "New Room Info: " + newRoom
            ENDIF
        ELSE
            code = 2
            CALL message(code)
            PRINTprint("- Please fill in the correct format for room info. Refer to the description for its details and format -")
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomCode()
    WHILE TRUE
        code = None
        PRINT("NEWLINE Room code only contains alphanumeric (A combination of uppercased alphabet and number), and no special characters NEWLINE Example: DKPRS1 NEWLINE NEWLINE Room Code: ")
        GET newRoomCode
        IF LENGTH(newRoomCode) <= 1:
            code = 2
            CALL message(code)
            PRINT("- Room Code must contain at least 2 or more alphanumeric long - NEWLINE")
            CONTINUELOOP
        ELSE
            code = None
        ENDIF
        IF newRoomCode.ISALNUM() THEN:
            code = None
        ELSE
            code = 2
            CALL message(code)
            print("- Please note that room code is only acceptable when it contains alphanumeric only- NEWLINE")
            CONTINUELOOP
        ENDIF
        IF code == None:
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ["N","n"] THEN:
                CONTINUELOOP
            ELSE:
                RETURN "New Room Code: " + newRoomCode
            ENDIF
        ELSE
            code = 2
            CALL message(code)
            PRINT("- Please fill in the correct format for room code. Refer to the description for its details and format -")
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION newRoomDimension()
    WHILE TRUE
        code = None
        PRINT("NEWLINE Room Dimension only contains numbers, no alphabets and special characters (The unit (in sqft) will be provided at the back) NEWLINE Example: 300(+sqft) NEWLINE NEWLINE Room Dimension: ")
        GET newRoomDimension
        IF LENGTH(newRoomDimension) == 0:
            code = 5
            CALL message(code)
            PRINT("- Please fill in the room dimension, and room dimension must have at least 100 or more sqft - NEWLINE")
            CONTINUELOOP
        ELSE
            code = None
        ENDIF
        IF newRoomDimension.ISDIGIT() THEN:
            code = None
        ELSE
            code = 2
            CALL message(code)
            print("- Room dimension must consist of number(s) -")
            CONTINUELOOP
        ENDIF
        IF code == None:
            PRINT("Save data? (Enter to continue, 'N' to return back): ")
            GET decisionkey
            IF decisionkey IN ["N","n"] THEN:
                CONTINUELOOP
            ELSE:
                RETURN "New Room Dimension: " + newRoomDimension + "+ sqft"
            ENDIF
        ELSE
            code = 2
            CALL message(code)
            PRINT("- Please fill in the correct format for room dimension. Refer to the description for its details and format -")
            CONTINUELOOP
        ENDIF
    ENDWHILE
ENDFUNCTION

FUNCTION apartmentEditData()

    DECLARE editdataconfirmation,editdataconfirmationpt1,editdataconfirmationpt2,editdataconfirmationpt3 AS INTEGER
        
    WHILE TRUE
        PRINT("NEWLINE First, please select the record that you decide to edit from above (Copy and paste the record): ")
        GET editdatainformation
        OPENFILE "Apartment.txt" IN READ AS Ahandler
        FOR record FROM Ahandler
            PRINT(NEWLINE record)
        CLOSE FILE
        PRINT("NEWLINE [R]-Room Type, [C]-Apartment Code, [D]-Dimensions, [P]- Pricing, [N]- Number of rooms, [A]- Apartment ID")
        PRINT("NEWLINE Next, please select the data type based on the above statement: ")
        GET datatype
        IF datatype == 'R' THEN
            apartmentdatatype = 0
        ELSE IF datatype == 'C' THEN
            apartmentdatatype = 1
        ELSE IF datatype == 'D' THEN
            apartmentdatatype = 2
        ELSE IF datatype == 'P' THEN
            apartmentdatatype = 3
        ELSE IF datatype == 'N' THEN
            apartmentdatatype = 4
        ELSE IF datatype == 'A' THEN
            apartmentdatatype= 5
        ELSE
            code = 0
            CALL message(code)
        ENDIF

        OPENFILE "Apartment.txt" IN READ AS Ahandler
        FOR item IN Ahandler
            PRINT(item,RIGHTSTRIP() RIGHTSTRIP(","))
        ENDFOR
        CLOSE FILE
            
        PRINT("Please insert the data that you want to edit: ")
        GET olddata

        PRINT("NEWLINE The last step, please insert the new data: ")
        GET newdata
        PRINT("NEWLINE Are you sure with the data that you inserted just now? Yes/No")
        GET editdataconfirmation

        IF editdataconfirmation == 'Yes' THEN
            OPENFILE "Apartment.txt" IN WRITE AS Ahandler
                FOR record FROM Ahandler:
                    itemstripped = record RIGHTSTRIP(",") RIGHTSTRIP("NEWLINE")
                    datasplited = SPLIT strippeditem INTO LIST(",")
                    IF datatype IN datasplited[num] THEN
                        REPLACE olddata TO newdata INTO record
                    PRINT("NEWLINE Results: NEWLINE",record NEWLINE Data Updated)
                ENDFOR
            CLOSEFILE
                PRINT("Enter any key to exit, Enter 'C' again to edit more data: ")
                GET deletedataconfirmationpt3
                IF deletedataconfirmationpt3 == 'C' THEN
                    RETURN TRUE
                ELSE
                    PRINT("Return to main menu")
                    RETURN FALSE
                ENDIF

        ELSE IF editdataconfirmation == 'No' THEN
            PRINT("NEWLINE Data not saved")
            RETURN TRUE
                
        ELSE THEN
            code = 0
            CALL message(code)
            RETURN FALSE

        ENDIF

    ELSE IF editdataconfirmationpt1 == 'N' THEN
        RETURN FALSE

    ELSE
        code = 0
        CALL message(code)
        RETURN FALSE
    ENDIF
ENDFUNCTION

FUNCTION apartmentDeleteData()
    WHILE TRUE
    DECLARE deletedataconfirmationpt1,deletedataconfirmationpt2 AS INTEGER
    OPENFILE "Apartment.txt" IN READ AS Ahandler
        for item in Ahandler
            PRINT(item,RIGHTSTRIP() RIGHTSTRIP(","))
        ENDFOR
    CLOSEFILE

    PRINT("NEWLINE Dear admin, please noted that the selected data from record will permanently delete the selected record")
    PRINT("NEWLINE Insert 'Y' to continue the progress, and 'N' to exit: ")
    GET deletedataconfirmationpt1
        PRINT("NEWLINE First and foremost, please select the record that you decide to delete from above (Copy and paste the whole record): ")
        GET editdatainformation
        OPENFILE "Apartment.txt" IN READ AS Ahandler
            FOR record FROM Ahandler
                PRINT(NEWLINE record)
            ENDFOR
        CLOSE FILE
        PRINT("NEWLINE [R]-Room Type, [C]-Apartment Code, [D]-Dimensions, [P]- Pricing, [N]- Number of rooms, [A]- Apartment ID")
        PRINT("NEWLINE Next, please select the data type based on the above statement: ")
        GET deletedatatype
        IF datatype == 'R' THEN
            apartmentdeletedatatype = 0
        ELSE IF datatype == 'C' THEN
            apartmentdeletedatatype = 1
        ELSE IF datatype == 'D' THEN
            apartmentdeletedatatype = 2
        ELSE IF datatype == 'P' THEN
            apartmentdeletedatatype = 3
        ELSE IF datatype == 'N' THEN
            apartmentdeletedatatype = 4
        ELSE IF datatype == 'A' THEN
            apartmentdeletedatatype = 5
        ELSE
            code = 0
            CALL message(code)
            RETURN TRUE
        ENDIF

        FILE "Apartment.txt" IN READ AS Ahandler
        FOR item IN Ahandler
            PRINT(item,RIGHTSTRIP() RIGHTSTRIP(","))
        ENDFOR
        CLOSE FILE
            
        PRINT("Please insert the data that you want to edit: ")
        GET olddata

        PRINT("NEWLINE The last step, please insert the new data: ")
        GET newdata
        PRINT("NEWLINE Are you sure with the data that you inserted just now? Yes/No")
        GET editdataconfirmation

        IF editdataconfirmation == 'Yes' THEN
            OPENFILE "Apartment.txt" IN WRITE AS Ahandler
                FOR record FROM Ahandler:
                    itemstripped = record RIGHTSTRIP(",") RIGHTSTRIP("NEWLINE")
                    datasplited = SPLIT strippeditem INTO LIST(",")
                    IF datatype IN datasplited[num] THEN
                        REPLACE olddata TO newdata INTO record
                    PRINT("NEWLINE Results: NEWLINE",record NEWLINE Data Updated)
                ENDFOR
            CLOSEFILE
                PRINT("Enter any key to exit, Enter 'C' again to delete more data: ")
                GET deletedataconfirmationpt3
                IF deletedataconfirmationpt3 == 'C' THEN
                    RETURN TRUE
                ELSE
                    PRINT("Return to main menu")
                    RETURN FALSE
                ENDIF

        ELSE IF editdataconfirmation == 'No' THEN
            PRINT("NEWLINE Data not saved")
            RETURN TRUE
                
        ELSE THEN
            code = 0
            CALL message(code)
            RETURN FALSE

        ENDIF

    ELSE IF editdataconfirmationpt1 == 'N' THEN
        RETURN FALSE

    ELSE
        code = 0
        CALL message(code)
        RETURN FALSE
    ENDIF
ENDFUNCTION

FUNCTION apartmentSearch(num)
    displaylist=[]
    OPENFILE "Apartment.txt" IN READ AS tRead
        aCheck = tRead.readlines()
        FOR record IN aCheck:
            listRec = SPLIT record IN LIST(",")
            displayList.append(listRec[num])
        ENDFOR
    CLOSEFILE
    PRINT(displayList)
ENDFUNCTION

FUNCTION searchbox()

    DECLARE option,num,code AS INTEGER
    DECLARE opt,list AS STRING
    DECLARE returnList AS ARRAY
    PRINT("NEWLINE Welcome to search box!")
    WHILE TRUE
        PRINT("NEWLINE 1. Search room specific details. NEWLINE 2. Search transaction details. NEWLINE 3. Search specific tenant details. NEWLINE NEWLINE 4. Exit search box. NEWLINE")
        PRINT("NEWLINE Please type the search criteria based on the keywords above: NEWLINE")
        GET option
        
        IF option == 1 THEN
            listCode = "a"
            PRINT("NEWLINE [A]-Apartment code, [P]-Pricing NEWLINE")
            GET opt

            IF opt IN ["A","a"] THEN
                PRINT("NEWLINE SR1,SR2,SR3,SR4,DR1,DR2,DR3,DR4,CPS,MPS,MPT,MP1,MP2,ESS3,ESS2,EST2.... NEWLINE Please enter the apartment code to begin the search: ")
                num = 1

            ELSEIF opt IN ["P","p"] THEN
                PRINT("NEWLINE RM350,RM450,RM550,RM650,RM690,RM700,RM750,RM800,RM840,RM890,RM900,RM940,RM950,RM1040,RM1050.... NEWLINE Please enter the pricing to begin the search: ")
                num = 3
            
            ELSE:
                code = 0
                CALL message(code)
            ENDIF

        ELSEIF option == 2 THEN
            listCode = "p"
            PRINT("NEWLINE [R]-Reference number,[D]-Transaction date,[T]-TenantID,[A]-Apartment code,[S]-Amount")
            GET opt
            IF opt IN ["R","r"] THEN
                num = 0
            IF opt IN ["D","d"] THEN
                num = 1
            IF opt IN ["T","t"] THEN
                num = 2
            IF opt IN ["A","a"] THEN
                PRINT("NEWLINE SR1,SR2,SR3,SR4,DR1,DR2,DR3,DR4,CPS,MPS,MPT,MP1,MP2,ESS3,ESS2,EST2.... NEWLINE Please enter the apartment code to begin the search: ")
                num = 3
            IF opt IN ["S","s"] THEN
                num = 4
            ELSE THEN
                code = 0
                CALL message(code)
            ENDIF

        ELSEIF option == 3 THEN
            listCode = "t"
            PRINT("NEWLINE [N]-Name,[G]-Gender,[P]-Phone number,[R]-Nationality,[D]-Rental start date,[I]-Income,[S]-Tenant status)
            GET opt 
            IF opt IN ["N","n"] THEN
                num = 0
            ELSEIF opt IN ["G","g"] THEN
                num = 1
            ELSEIF opt IN ["P","p"] THEN
                num = 2
            ELSEIF opt IN ["R","r"] THEN
                num = 3
            ELSEIF opt IN ["D","d"] THEN
                num = 4
            ELSEIF opt IN ["I","i"] THEN
                num = 5
            ELSEIF opt IN ["S","s"] THEN
                num = 6
            ELSE:
                code = 0
                CALL message(code)
            ENDIF

        ELSEIF option == 4 THEN

            PRINT(" NEWLINE Return to main menu NEWLINE NEWLINE --------------------------- ")
            RETURN FALSE

        ELSE:
            code = 0
            CALL message(code)
        ENDIF
        details = NONE
        CALL searchinformation(listCode,num,details)
ENDFUNCTION

FUNCTION searchInformation(listCode,num,details)
    DECLARE searchInformation AS INTEGER
    l = CALL listIdentifier(listCode)
    WHILE TRUE
        IF details THEN
            searchInformation == details
        ELSE THEN
            PRINT("Select and enter text to begin search: ")
            GET searchInformation        
        OPENFILE l IN READ AS Xhandler
            PRINT("NEWLINE Results: NEWLINE")
            FOR record FROM Xhandler
                strippeditem = record RIGHTSTRIP(",") RIGHTSTRIP("NEWLINE")
                data = SPLIT strippeditem INTO LIST(",")
                IF searchInformation IN data LOCATION num THEN
                    printRun = TRUE
                    PRINT(record)
                ELSE THEN
                    CONTINUELOOP
            IF printRun == TRUE
                PRINT("Matching Records ends here.")
            ELSE THEN
                code = 4
                CALL message(code)
                ENDIF
            ENDFOR
        CLOSEFILE
        PRINT("Exit program? Enter any key to exit, Enter 'C' to continue.")
        GET exitSearch
        IF exitSearch IN ["C","c"] THEN
            CONTINUELOOP
        ELSE THEN
            RETURN FALSE
        ENDIF
    ENDWHILE
ENDFUNCTION

BEGIN
IMPORT datetime AS dt
DECLARE listCode,username,password AS STRING
DECLARE code AS INTEGER
listCode = "u"
code = NONE
username = NONE
password = NONE
PRINT("NEWLINE Welcome to Tenant Management System.")
PRINT("[Y]-Yes I am.NEWLINE[Any Other Key]-No,I have an existing accountNEWLINEAre you a new user: ")
GET new
IF new IN ["Y","y"] THEN
    CALL register(listCode,code) RETURNING username,password
    CALL login(listCode,code,username,password)
ELSE
    CALL login(listCode,code,username,password)
ENDIF
END